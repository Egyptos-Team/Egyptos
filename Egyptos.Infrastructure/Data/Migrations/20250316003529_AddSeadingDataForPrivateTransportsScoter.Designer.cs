// <auto-generated />
using System;
using Egyptos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egyptos.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316003529_AddSeadingDataForPrivateTransportsScoter")]
    partial class AddSeadingDataForPrivateTransportsScoter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaTypeId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "WorkingId");

                    b.HasIndex("WorkingId");

                    b.ToTable("AreaWorkings");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventDateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventDateId");

                    b.HasIndex("EventDateId");

                    b.ToTable("BookingEventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("UserId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("BookingHotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentCancel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrivateTransportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTransportId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingPrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartBooking")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TourGuideId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingTourGuides");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("BookingTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndSubscription")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveToSubscribe")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartSubscription")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Historicals");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoricalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalId");

                    b.ToTable("HistoricalImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c8298a9-982f-4d9d-a632-55f7d148f735",
                            Email = "admin@egyptos.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NationalId = "12345678901234",
                            NormalizedEmail = "ADMIN@EGYPTOS.COM",
                            NormalizedUserName = "ADMIN@EGYPTOS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f3a18b3-c453-4a3a-b2e3-57f2e0429f50",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "admin@egyptos.com"
                        },
                        new
                        {
                            Id = "74f74d5a-25a8-456f-a703-7eb67721679e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90a57528-207c-4df0-9b83-bfac6cfe2d06",
                            Email = "dfsfv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmed",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Hesham",
                            LockoutEnabled = false,
                            NationalId = "30303030303030",
                            NormalizedEmail = "DFSFV@GMAIL.COM",
                            NormalizedUserName = "DFSFV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01010101010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c37c036-2659-4148-a23f-5d094da37121",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "dfsfv@gmail.com"
                        },
                        new
                        {
                            Id = "df4f87ce-beee-493f-a115-c2eb96babc7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6921eade-b140-4d72-acec-4048194cc4a9",
                            Email = "dfsfvv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yousef",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "30303030303030",
                            NormalizedEmail = "DFSFVV@GMAIL.COM",
                            NormalizedUserName = "DFSFVV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01010101010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf3e134f-bd5a-41d1-a4e5-92cbe8da262e",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "dfsfvv@gmail.com"
                        },
                        new
                        {
                            Id = "5694452c-4bfe-4bd0-a97e-57f5948684e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56304034-7947-436a-9f45-5aae19827221",
                            Email = "dfsfvvv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Nassar",
                            LockoutEnabled = false,
                            NationalId = "30303030303030",
                            NormalizedEmail = "DFSFVVV@GMAIL.COM",
                            NormalizedUserName = "DFSFVVV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01010101010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47ab1ce3-1655-4215-bd95-af4642348d7c",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "dfsfvvv@gmail.com"
                        },
                        new
                        {
                            Id = "3808b9cb-48b0-4a56-9492-67f362dfa9b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56298673-8700-4929-8c4d-2a2983da53c2",
                            Email = "dfsfvvvv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amir",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Mahmoud",
                            LockoutEnabled = false,
                            NationalId = "30303030303030",
                            NormalizedEmail = "DFSFVVVV@GMAIL.COM",
                            NormalizedUserName = "DFSFVVVV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01010101010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb24b4fd-7658-4b81-82df-c853512f4627",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "dfsfvvvv@gmail.com"
                        },
                        new
                        {
                            Id = "803d9ac6-8b8b-4e41-932f-8b0ef2bee591",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab5f9b96-4d25-4991-976c-dfd89da00178",
                            Email = "dfsfvvvvv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rafat",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Ashrf",
                            LockoutEnabled = false,
                            NationalId = "30303030303030",
                            NormalizedEmail = "DFSFVVVVV@GMAIL.COM",
                            NormalizedUserName = "DFSFVVVVV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01010101010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15539178-b7a5-4270-a046-5cfaa7fbc3e8",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "dfsfvvvvv@gmail.com"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("PrivateTransports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 4,
                            Description = "Luxury sports sedan with high performance.",
                            ImageUrl = "PrivateTransports/Car/bmw-5.jpg",
                            IsAvailable = true,
                            Name = "Bmw M5",
                            PricePerHour = 50.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            Description = "Premium luxury sedan with advanced features.",
                            ImageUrl = "PrivateTransports/Car/Mercedes-Benz S-Class.jpeg",
                            IsAvailable = true,
                            Name = "Mercedes-Benz S-Class",
                            PricePerHour = 60.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 4,
                            Description = "High-end executive car with superior comfort.",
                            ImageUrl = "PrivateTransports/Car/Audi A8.jpg",
                            IsAvailable = true,
                            Name = "Audi A8",
                            PricePerHour = 55.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 4,
                            Description = "Reliable and comfortable sedan for everyday use.",
                            ImageUrl = "PrivateTransports/Car/Toyota Camry.webp",
                            IsAvailable = true,
                            Name = "Toyota Camry",
                            PricePerHour = 30.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 4,
                            Description = "Affordable compact sedan with great fuel efficiency.",
                            ImageUrl = "PrivateTransports/Car/Nissan Sunny.jpg",
                            IsAvailable = true,
                            Name = "Nissan Sunny",
                            PricePerHour = 20.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 4,
                            Description = "Luxury SUV with off-road capability and elegance.",
                            ImageUrl = "PrivateTransports/Car/Range Rover Evoque.jpg",
                            IsAvailable = true,
                            Name = "Range Rover Evoque",
                            PricePerHour = 70.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 7,
                            Description = "Spacious full-size SUV perfect for families and groups.",
                            ImageUrl = "PrivateTransports/Car/Chevrolet Tahoe.jpg",
                            IsAvailable = true,
                            Name = "Chevrolet Tahoe",
                            PricePerHour = 65.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 4,
                            Description = "Economical and stylish sedan with modern features.",
                            ImageUrl = "PrivateTransports/Car/Hyundai Elantra.jpeg",
                            IsAvailable = true,
                            Name = "Hyundai Elantra",
                            PricePerHour = 25.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 4,
                            Description = "Classic American muscle car with powerful performance.",
                            ImageUrl = "PrivateTransports/Car/Ford Mustang.jpeg",
                            IsAvailable = true,
                            Name = "Ford Mustang",
                            PricePerHour = 80.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 4,
                            Description = "Electric luxury sedan with cutting-edge technology.",
                            ImageUrl = "PrivateTransports/Car/Tesla Model S.jpg",
                            IsAvailable = true,
                            Name = "Tesla Model S",
                            PricePerHour = 90.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 5,
                            Description = "Compact SUV with modern features and fuel efficiency.",
                            ImageUrl = "PrivateTransports/Car/Kia Sportage.jpg",
                            IsAvailable = true,
                            Name = "Kia Sportage",
                            PricePerHour = 35.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 4,
                            Description = "Spacious and comfortable sedan with great reliability.",
                            ImageUrl = "PrivateTransports/Car/Honda Accord.jpeg",
                            IsAvailable = true,
                            Name = "Honda Accord",
                            PricePerHour = 40.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 4,
                            Description = "Iconic off-road vehicle for adventure seekers.",
                            ImageUrl = "PrivateTransports/Car/Jeep Wrangler.jpeg",
                            IsAvailable = true,
                            Name = "Jeep Wrangler",
                            PricePerHour = 75.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 4,
                            Description = "Reliable and stylish German sedan.",
                            ImageUrl = "PrivateTransports/Car/Volkswagen Passat.jpeg",
                            IsAvailable = true,
                            Name = "Volkswagen Passat",
                            PricePerHour = 38.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 5,
                            Description = "Luxury sports SUV with high-end features.",
                            ImageUrl = "PrivateTransports/Car/Porsche Cayenne.jpg",
                            IsAvailable = true,
                            Name = "Porsche Cayenne",
                            PricePerHour = 100.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 15,
                            Description = "Luxury minibus with premium comfort.",
                            ImageUrl = "PrivateTransports/Bus/Mercedes-Benz Sprinter.jpg",
                            IsAvailable = true,
                            Name = "Mercedes-Benz Sprinter",
                            PricePerHour = 100.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 22,
                            Description = "Comfortable mid-sized bus for group travel.",
                            ImageUrl = "PrivateTransports/Bus/Toyota Coaster.jpeg",
                            IsAvailable = true,
                            Name = "Toyota Coaster",
                            PricePerHour = 80.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 20,
                            Description = "Efficient minibus for short trips.",
                            ImageUrl = "PrivateTransports/Bus/Hyundai County.jpeg",
                            IsAvailable = true,
                            Name = "Hyundai County",
                            PricePerHour = 75.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 26,
                            Description = "Reliable minibus for tourism and business trips.",
                            ImageUrl = "PrivateTransports/Bus/Mitsubishi Rosa.jpg",
                            IsAvailable = true,
                            Name = "Mitsubishi Rosa",
                            PricePerHour = 85.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 50,
                            Description = "Luxury long-distance coach with high-end features.",
                            ImageUrl = "PrivateTransports/Bus/Volvo 9700.jpg",
                            IsAvailable = true,
                            Name = "Volvo 9700",
                            PricePerHour = 200.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 50,
                            Description = "Premium luxury coach for VIP travel.",
                            ImageUrl = "PrivateTransports/Bus/Setra TopClass.jpeg",
                            IsAvailable = true,
                            Name = "Setra TopClass",
                            PricePerHour = 220.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 18,
                            Description = "Economical minibus for group transport.",
                            ImageUrl = "PrivateTransports/Bus/Iveco Daily Minibus.jpeg",
                            IsAvailable = true,
                            Name = "Iveco Daily Minibus",
                            PricePerHour = 90.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 35,
                            Description = "Spacious tourist bus for comfortable travel.",
                            ImageUrl = "PrivateTransports/Bus/King Long XMQ6900.jpg",
                            IsAvailable = true,
                            Name = "King Long XMQ6900",
                            PricePerHour = 110.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 55,
                            Description = "Luxury coach with modern amenities.",
                            ImageUrl = "PrivateTransports/Bus/Scania Touring HD.jpg",
                            IsAvailable = true,
                            Name = "Scania Touring HD",
                            PricePerHour = 180.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 50,
                            Description = "High-end tourist coach for long-distance trips.",
                            ImageUrl = "PrivateTransports/Bus/MAN Lion’s Coach.jpeg",
                            IsAvailable = true,
                            Name = "MAN Lion’s Coach",
                            PricePerHour = 195.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 55,
                            Description = "Luxury coach designed for tourism and comfort.",
                            ImageUrl = "PrivateTransports/Bus/Mercedes Tourismo.jpeg",
                            IsAvailable = true,
                            Name = "Mercedes Tourismo",
                            PricePerHour = 210.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 80,
                            Description = "Double-decker coach for large group tours.",
                            ImageUrl = "PrivateTransports/Bus/Neoplan Skyliner.jpg",
                            IsAvailable = true,
                            Name = "Neoplan Skyliner",
                            PricePerHour = 250.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 45,
                            Description = "Reliable and affordable coach for daily transport.",
                            ImageUrl = "PrivateTransports/Bus/Yutong ZK6122.jpeg",
                            IsAvailable = true,
                            Name = "Yutong ZK6122",
                            PricePerHour = 140.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 50,
                            Description = "High-performance luxury coach for premium travel.",
                            ImageUrl = "PrivateTransports/Bus/Volvo B11R.jpeg",
                            IsAvailable = true,
                            Name = "Volvo B11R",
                            PricePerHour = 230.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 48,
                            Description = "Spacious coach with modern amenities.",
                            ImageUrl = "PrivateTransports/Bus/Golden Dragon XML6127.jpeg",
                            IsAvailable = true,
                            Name = "Golden Dragon XML6127",
                            PricePerHour = 160.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 2,
                            Description = "The scoter is a type of sea duck that lives in cold and temperate regions.",
                            ImageUrl = "PrivateTransports/Scoter/1.jpg",
                            IsAvailable = true,
                            Name = "Scoter1",
                            PricePerHour = 160.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 2,
                            Description = "Scooters are easy to handle and convenient for daily transportation.",
                            ImageUrl = "PrivateTransports/Scoter/2.jpg",
                            IsAvailable = true,
                            Name = "Scoter2",
                            PricePerHour = 250.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 2,
                            Description = "There are three main species of scoter: the black scoter, the surf scoter, and the velvet scoter",
                            ImageUrl = "PrivateTransports/Scoter/3.jpg",
                            IsAvailable = true,
                            Name = "Scoter3",
                            PricePerHour = 200.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 2,
                            Description = "Scoters primarily feed on mollusks, crustaceans, and small fish",
                            ImageUrl = "PrivateTransports/Scoter/4.jpg",
                            IsAvailable = true,
                            Name = "Scoter4",
                            PricePerHour = 170.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 2,
                            Description = "They have dark-colored feathers, with males usually appearing blacker than females.",
                            ImageUrl = "PrivateTransports/Scoter/4.jpg",
                            IsAvailable = true,
                            Name = "Scoter5",
                            PricePerHour = 130.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 2,
                            Description = "Scoters prefer coastal waters and large water bodies like lakes and rivers.",
                            ImageUrl = "PrivateTransports/Scoter/5.jpg",
                            IsAvailable = true,
                            Name = "Scoter6",
                            PricePerHour = 110.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 2,
                            Description = "Electric scooters are commonly used for short-distance travel in cities.",
                            ImageUrl = "PrivateTransports/Scoter/2.jpg",
                            IsAvailable = true,
                            Name = "Scoter7",
                            PricePerHour = 120.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 2,
                            Description = "Kick scooters are popular among children and some commuters.",
                            ImageUrl = "PrivateTransports/Scoter/1.jpg",
                            IsAvailable = true,
                            Name = "Scoter8",
                            PricePerHour = 150.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 2,
                            Description = "Scooters are easy to handle and convenient for daily transportation.",
                            ImageUrl = "PrivateTransports/Scoter/1.jpg",
                            IsAvailable = true,
                            Name = "Scoter9",
                            PricePerHour = 100.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PublicTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("PublicTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("SalaryPerHour")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "TourGuideId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bus"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Scoter"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("BackTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublicTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PublicTransportId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Workings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bded8535075",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be08dd83078",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ce2fd704-7a3c-4a03-846e-c5479a8b921d",
                            ConcurrencyStamp = "aacecacd-28e1-43cc-92da-decb1f9b32c4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3",
                            ConcurrencyStamp = "B1F115C4-D298-4C6D-AA7B-6C7DC785A1C5",
                            Name = "TourGuide",
                            NormalizedName = "TOURGUIDE"
                        },
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bdf740adff8",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be100f11384",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            RoleId = "0191d311-2918-7f76-bd8a-0bded8535075"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.AreaType", "AreaType")
                        .WithMany("Areas")
                        .HasForeignKey("AreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaImages")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Working", "Working")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("WorkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Working");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "EventDate")
                        .WithMany()
                        .HasForeignKey("EventDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingEventDates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Hotel", "Hotel")
                        .WithMany("BookingHotels")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingHotels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.PrivateTransport", "PrivateTransport")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("PrivateTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTransport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("BookingTourGuides")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("BookingTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Event", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Historical", "Historical")
                        .WithMany("HistoricalImages")
                        .HasForeignKey("HistoricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historical");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", null)
                        .WithMany("Items")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TransportType", "TransportType")
                        .WithMany("PrivateTransports")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("Trips")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.PublicTransport", "PublicTransport")
                        .WithMany()
                        .HasForeignKey("PublicTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("PublicTransport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaImages");

                    b.Navigation("AreaWorkings");

                    b.Navigation("Items");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Navigation("HistoricalImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("BookingHotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("BookingEventDates");

                    b.Navigation("BookingHotels");

                    b.Navigation("BookingPrivateTransports");

                    b.Navigation("BookingTrips");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Navigation("BookingPrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Navigation("BookingTourGuides");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Navigation("PrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Navigation("BookingTrips");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Navigation("AreaWorkings");
                });
#pragma warning restore 612, 618
        }
    }
}
