// <auto-generated />
using System;
using Egyptos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egyptos.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaTypeId");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaImages", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "WorkingId");

                    b.HasIndex("WorkingId");

                    b.ToTable("AreaWorkings", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventDateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventDateId");

                    b.HasIndex("EventDateId");

                    b.ToTable("BookingEventDates", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("UserId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("BookingHotels", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentCancel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrivateTransportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTransportId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingPrivateTransports", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentCancel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartBooking")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingTourGuides", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("BookingTrips", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A festival celebrating Ismailia's famous mangoes with exhibitions and entertainment.",
                            EventTypeId = 4,
                            Name = "Ismailia Mango Festival"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A festival showcasing short films from Egypt and beyond, attracting filmmakers and critics.",
                            EventTypeId = 5,
                            Name = "Alexandria Short Film Festival"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A festival dedicated to women in theatre, featuring performances and discussions.",
                            EventTypeId = 5,
                            Name = "International Women Theatre Festival"
                        },
                        new
                        {
                            Id = 4,
                            Description = "An astronomical event where the sun aligns with the temple’s axis, showcasing ancient Egyptian ingenuity.",
                            EventTypeId = 2,
                            Name = "The Solar Alignment on the Karnak Temple"
                        },
                        new
                        {
                            Id = 5,
                            Description = "One of the Arab world's most prestigious film festivals, drawing filmmakers and critics.",
                            EventTypeId = 1,
                            Name = "Cairo International Film Festival"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A spectacular show narrating Egypt’s history using sound and light projections on the pyramids.",
                            EventTypeId = 2,
                            Name = "Giza Pyramids Sound and Light Show"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A festival celebrating Ramadan with beautiful lantern displays and cultural performances.",
                            EventTypeId = 3,
                            Name = "Ramadan Lantern Festival"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A vibrant summer festival with music, dance, and water activities along the Red Sea coast.",
                            EventTypeId = 4,
                            Name = "Hurghada Summer Festival"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A theatre festival featuring international performances, workshops, and panel discussions.",
                            EventTypeId = 1,
                            Name = "Sharm El Sheikh International Theatre Festival"
                        },
                        new
                        {
                            Id = 10,
                            Description = "An exhibition displaying King Tutankhamun’s treasures, offering insights into his life and reign.",
                            EventTypeId = 2,
                            Name = "Tutankhamun Exhibition"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A religious festival celebrating Prophet Muhammad’s birth with prayers and parades.",
                            EventTypeId = 3,
                            Name = "Mawlid Al-Nabi Celebrations"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A cultural festival celebrating Egyptian heritage with traditional music and storytelling.",
                            EventTypeId = 4,
                            Name = "Sphinx Festival"
                        },
                        new
                        {
                            Id = 13,
                            Description = "An international film festival held in El Gouna, featuring high-quality films and industry panels.",
                            EventTypeId = 1,
                            Name = "El Gouna Film Festival"
                        },
                        new
                        {
                            Id = 14,
                            Description = "A grand parade transferring royal mummies to their new museum with spectacular performances.",
                            EventTypeId = 2,
                            Name = "Pharaohs' Golden Parade"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Nationwide celebrations marking the end of Ramadan with special prayers and cultural events.",
                            EventTypeId = 3,
                            Name = "Eid Al-Fitr Festivities"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A festival celebrating Nubian traditions with music, dance, and traditional crafts.",
                            EventTypeId = 4,
                            Name = "Aswan Nubian Festival"
                        },
                        new
                        {
                            Id = 17,
                            Description = "An international squash tournament held in El Gouna, featuring top-ranked players.",
                            EventTypeId = 1,
                            Name = "Gouna Squash Open"
                        },
                        new
                        {
                            Id = 18,
                            Description = "A major book fair attracting authors and publishers for literary discussions and signings.",
                            EventTypeId = 5,
                            Name = "Alexandria Book Fair"
                        },
                        new
                        {
                            Id = 19,
                            Description = "A festival celebrating Siwa Oasis’ famous dates, featuring local crafts and traditions.",
                            EventTypeId = 4,
                            Name = "Siwa Date Festival"
                        },
                        new
                        {
                            Id = 20,
                            Description = "A special exhibition marking the anniversary of the Egyptian Museum with rare artifacts on display.",
                            EventTypeId = 2,
                            Name = "Egyptian Museum Anniversary Exhibition"
                        },
                        new
                        {
                            Id = 21,
                            Description = "A religious celebration of Coptic Christmas, featuring prayers, feasts, and community gatherings.",
                            EventTypeId = 3,
                            Name = "Coptic Christmas Celebrations"
                        },
                        new
                        {
                            Id = 22,
                            Description = "An international kite surfing competition held on Egypt’s Red Sea coast, attracting top athletes.",
                            EventTypeId = 1,
                            Name = "Red Sea Kite Surfing Championship"
                        },
                        new
                        {
                            Id = 23,
                            Description = "An annual exhibition displaying works from Egypt's top artists in the historic city of Luxor.",
                            EventTypeId = 5,
                            Name = "Luxor Art Exhibition"
                        },
                        new
                        {
                            Id = 24,
                            Description = "A festival celebrating contemporary street art with murals, performances, and workshops.",
                            EventTypeId = 5,
                            Name = "Cairo Street Art Festival"
                        },
                        new
                        {
                            Id = 25,
                            Description = "A conference focusing on the historical and cultural significance of Islamic heritage in Egypt.",
                            EventTypeId = 3,
                            Name = "Islamic Heritage Conference"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndSubscription")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveToSubscribe")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartSubscription")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A festival celebrating Ismailia's famous mangoes with exhibitions and entertainment.",
                            EndDate = new DateTime(2025, 7, 10, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 10, 9, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            IsActiveToSubscribe = false,
                            Location = "Ismailia, Egypt",
                            Price = 100.0,
                            StartDate = new DateTime(2025, 7, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "A festival showcasing short films from Egypt and beyond, attracting filmmakers and critics.",
                            EndDate = new DateTime(2025, 4, 20, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 4, 10, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            IsActiveToSubscribe = true,
                            Location = "Alexandria, Egypt",
                            Price = 150.0,
                            StartDate = new DateTime(2025, 4, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "A festival dedicated to women in theatre, featuring performances and discussions.",
                            EndDate = new DateTime(2025, 3, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 3, 5, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 120.0,
                            StartDate = new DateTime(2025, 3, 8, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "An astronomical event where the sun aligns with the temple’s axis, showcasing ancient Egyptian ingenuity.",
                            EndDate = new DateTime(2025, 2, 21, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 2, 18, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 4,
                            IsActiveToSubscribe = false,
                            Location = "Karnak Temple, Luxor, Egypt",
                            Price = 250.0,
                            StartDate = new DateTime(2025, 2, 21, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "One of the Arab world's most prestigious film festivals, drawing filmmakers and critics.",
                            EndDate = new DateTime(2025, 11, 20, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 11, 5, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 5,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 200.0,
                            StartDate = new DateTime(2025, 11, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Description = "A spectacular show narrating Egypt’s history using sound and light projections on the pyramids.",
                            EndDate = new DateTime(2025, 5, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 4, 30, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 6,
                            IsActiveToSubscribe = false,
                            Location = "Giza Pyramids, Egypt",
                            Price = 180.0,
                            StartDate = new DateTime(2025, 5, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Description = "A festival celebrating Ramadan with beautiful lantern displays and cultural performances.",
                            EndDate = new DateTime(2025, 4, 2, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 3, 23, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 7,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 80.0,
                            StartDate = new DateTime(2025, 3, 25, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Description = "A vibrant summer festival with music, dance, and water activities along the Red Sea coast.",
                            EndDate = new DateTime(2025, 8, 20, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 8, 10, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 8,
                            IsActiveToSubscribe = false,
                            Location = "Hurghada, Egypt",
                            Price = 150.0,
                            StartDate = new DateTime(2025, 8, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Description = "A theatre festival featuring international performances, workshops, and panel discussions.",
                            EndDate = new DateTime(2025, 12, 10, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 12, 1, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventId = 9,
                            IsActiveToSubscribe = false,
                            Location = "Sharm El Sheikh, Egypt",
                            Price = 170.0,
                            StartDate = new DateTime(2025, 12, 5, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Description = "An exhibition showcasing the treasures of King Tutankhamun.",
                            EndDate = new DateTime(2025, 3, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 3, 10, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EventId = 10,
                            IsActiveToSubscribe = false,
                            Location = "Cairo Museum",
                            Price = 300.0,
                            StartDate = new DateTime(2025, 3, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Description = "Religious festival celebrating Prophet Muhammad’s birth.",
                            EndDate = new DateTime(2025, 9, 26, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 9, 20, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EventId = 11,
                            IsActiveToSubscribe = false,
                            Location = "Al Azhar Mosque",
                            Price = 0.0,
                            StartDate = new DateTime(2025, 9, 26, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Description = "A cultural festival celebrating Egyptian heritage.",
                            EndDate = new DateTime(2025, 6, 10, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 6, 5, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EventId = 12,
                            IsActiveToSubscribe = false,
                            Location = "Giza Plateau",
                            Price = 150.0,
                            StartDate = new DateTime(2025, 6, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Description = "A prestigious international film festival held in El Gouna.",
                            EndDate = new DateTime(2025, 10, 28, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 10, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EventId = 13,
                            IsActiveToSubscribe = false,
                            Location = "El Gouna, Red Sea",
                            Price = 500.0,
                            StartDate = new DateTime(2025, 10, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Description = "A grand parade transferring royal mummies to their new museum with spectacular performances.",
                            EndDate = new DateTime(2025, 9, 24, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 9, 19, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            EventId = 14,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 450.0,
                            StartDate = new DateTime(2025, 9, 20, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Description = "Eid al-Fitr in Egypt is a major religious and cultural event that celebrates the end of Ramadan, the Islamic holy month of fasting.",
                            EndDate = new DateTime(2025, 4, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 3, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 15,
                            IsActiveToSubscribe = true,
                            Location = "Egypt",
                            Price = 150.0,
                            StartDate = new DateTime(2025, 3, 31, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 3, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            Description = "​The Aswan International Cultural Festival is an annual event celebrating the rich heritage of Nubian culture through music, dance, and art.",
                            EndDate = new DateTime(2025, 2, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 1, 30, 7, 50, 0, 0, DateTimeKind.Unspecified),
                            EventId = 16,
                            IsActiveToSubscribe = false,
                            Location = "Aswan, Egypt",
                            Price = 500.0,
                            StartDate = new DateTime(2025, 2, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 1, 19, 7, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            Description = "​The El Gouna International Squash Open is a premier event on the Professional Squash Association (PSA) World Tour, attracting top players from around the globe.",
                            EndDate = new DateTime(2025, 4, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 4, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 17,
                            IsActiveToSubscribe = false,
                            Location = "El Gouna, Egypt",
                            Price = 1100.0,
                            StartDate = new DateTime(2025, 4, 12, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            Description = "The Bibliotheca Alexandrina International Book Fair is an annual cultural event celebrating literature, arts, and intellectual exchange.",
                            EndDate = new DateTime(2025, 7, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 7, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 18,
                            IsActiveToSubscribe = false,
                            Location = "Alexandria, Egypt",
                            Price = 100.0,
                            StartDate = new DateTime(2025, 7, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 7, 1, 9, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            Description = "​The Siwa Date Festival is an annual celebration held in Siwa Oasis, Egypt, honoring the region's rich tradition of date cultivation. This event showcases the oasis's cultural heritage and agricultural significance.",
                            EndDate = new DateTime(2025, 10, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 10, 13, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 19,
                            IsActiveToSubscribe = false,
                            Location = "Siwa, Egypt",
                            Price = 200.0,
                            StartDate = new DateTime(2025, 10, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            Description = "​The Egyptian Museum in Cairo, established in 1902, is renowned for its extensive collection of ancient Egyptian artifacts.",
                            EndDate = new DateTime(2025, 7, 3, 10, 55, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 6, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 20,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 250.0,
                            StartDate = new DateTime(2025, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 6, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            Description = "Coptic Christmas is a time of profound spiritual reflection and communal celebration, deeply rooted in Egypt's rich Christian heritage, it's celebrated by the Coptic Orthodox Church in Egypt",
                            EndDate = new DateTime(2025, 1, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 1, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 21,
                            IsActiveToSubscribe = false,
                            Location = "Egypt",
                            Price = 100.0,
                            StartDate = new DateTime(2025, 1, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            Description = "​The Red Sea region in Egypt is renowned for its vibrant kitesurfing scene, hosting various events and safaris throughout the year.",
                            EndDate = new DateTime(2025, 4, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 4, 13, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 22,
                            IsActiveToSubscribe = false,
                            Location = "Red Sea, Egypt",
                            Price = 500.0,
                            StartDate = new DateTime(2025, 4, 16, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            Description = "The Luxor Spring Arts Festival aims to celebrate both contemporary and traditional Egyptian art, providing a platform for local and international artists to showcase their work.​",
                            EndDate = new DateTime(2025, 7, 21, 10, 55, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 7, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 23,
                            IsActiveToSubscribe = false,
                            Location = "Luxor, Egypt",
                            Price = 450.0,
                            StartDate = new DateTime(2025, 7, 16, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 7, 3, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            Description = "Art Cairo is an annual art fair that showcases contemporary and modern Arab art, providing a platform for artists from Egypt and the broader region to present their work.",
                            EndDate = new DateTime(2025, 2, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 2, 6, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 24,
                            IsActiveToSubscribe = false,
                            Location = "Cairo, Egypt",
                            Price = 150.0,
                            StartDate = new DateTime(2025, 2, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 2, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            Description = " This conference aims to explore various aspects of Islam and its cultural manifestations.​",
                            EndDate = new DateTime(2025, 11, 29, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            EndSubscription = new DateTime(2025, 11, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 25,
                            IsActiveToSubscribe = false,
                            Location = "Alexandria, Egypt",
                            Price = 200.0,
                            StartDate = new DateTime(2025, 11, 29, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            StartSubscription = new DateTime(2025, 11, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            ImageUrl = "EventImages/Ismailia/1.webp"
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            ImageUrl = "EventImages/Ismailia/2.webp"
                        },
                        new
                        {
                            Id = 3,
                            EventId = 1,
                            ImageUrl = "EventImages/Ismailia/3.webp"
                        },
                        new
                        {
                            Id = 4,
                            EventId = 2,
                            ImageUrl = "EventImages/Alexandria/1.webp"
                        },
                        new
                        {
                            Id = 5,
                            EventId = 2,
                            ImageUrl = "EventImages/Alexandria/2.webp"
                        },
                        new
                        {
                            Id = 6,
                            EventId = 2,
                            ImageUrl = "EventImages/Alexandria/3.webp"
                        },
                        new
                        {
                            Id = 7,
                            EventId = 3,
                            ImageUrl = "EventImages/Cairo/1.webp"
                        },
                        new
                        {
                            Id = 8,
                            EventId = 3,
                            ImageUrl = "EventImages/Cairo/2.webp"
                        },
                        new
                        {
                            Id = 9,
                            EventId = 3,
                            ImageUrl = "EventImages/Cairo/3.webp"
                        },
                        new
                        {
                            Id = 10,
                            EventId = 4,
                            ImageUrl = "EventImages/Karnak Temple, Luxor, Egypt/1.webp"
                        },
                        new
                        {
                            Id = 11,
                            EventId = 4,
                            ImageUrl = "EventImages/Karnak Temple, Luxor, Egypt/2.webp"
                        },
                        new
                        {
                            Id = 12,
                            EventId = 4,
                            ImageUrl = "EventImages/Karnak Temple, Luxor, Egypt/3.webp"
                        },
                        new
                        {
                            Id = 13,
                            EventId = 5,
                            ImageUrl = "EventImages/Cairo,Egypt/1.webp"
                        },
                        new
                        {
                            Id = 14,
                            EventId = 5,
                            ImageUrl = "EventImages/Cairo,Egypt/2.webp"
                        },
                        new
                        {
                            Id = 15,
                            EventId = 5,
                            ImageUrl = "EventImages/Cairo,Egypt/3.webp"
                        },
                        new
                        {
                            Id = 16,
                            EventId = 6,
                            ImageUrl = "EventImages/Giza Pyramids, Egypt/1.webp"
                        },
                        new
                        {
                            Id = 17,
                            EventId = 6,
                            ImageUrl = "EventImages/Giza Pyramids, Egypt/2.webp"
                        },
                        new
                        {
                            Id = 18,
                            EventId = 6,
                            ImageUrl = "EventImages/Giza Pyramids, Egypt/3.webp"
                        },
                        new
                        {
                            Id = 19,
                            EventId = 7,
                            ImageUrl = "EventImages/Cairo, Egypt2/1.webp"
                        },
                        new
                        {
                            Id = 20,
                            EventId = 7,
                            ImageUrl = "EventImages/Cairo, Egypt2/2.webp"
                        },
                        new
                        {
                            Id = 21,
                            EventId = 7,
                            ImageUrl = "EventImages/Cairo, Egypt2/3.webp"
                        },
                        new
                        {
                            Id = 22,
                            EventId = 8,
                            ImageUrl = "EventImages/Hurghada, Egypt/1.webp"
                        },
                        new
                        {
                            Id = 23,
                            EventId = 8,
                            ImageUrl = "EventImages/Hurghada, Egypt/2.webp"
                        },
                        new
                        {
                            Id = 24,
                            EventId = 8,
                            ImageUrl = "EventImages/Hurghada, Egypt/3.webp"
                        },
                        new
                        {
                            Id = 25,
                            EventId = 9,
                            ImageUrl = "EventImages/Sharm El Sheikh, Egypt/1.webp"
                        },
                        new
                        {
                            Id = 26,
                            EventId = 9,
                            ImageUrl = "EventImages/Sharm El Sheikh, Egypt/2.webp"
                        },
                        new
                        {
                            Id = 27,
                            EventId = 9,
                            ImageUrl = "EventImages/Sharm El Sheikh, Egypt/3.webp"
                        },
                        new
                        {
                            Id = 28,
                            EventId = 10,
                            ImageUrl = "EventImages/Cairo Museum/1.webp"
                        },
                        new
                        {
                            Id = 29,
                            EventId = 10,
                            ImageUrl = "EventImages/Cairo Museum/2.webp"
                        },
                        new
                        {
                            Id = 30,
                            EventId = 10,
                            ImageUrl = "EventImages/Cairo Museum/3.webp"
                        },
                        new
                        {
                            Id = 31,
                            EventId = 11,
                            ImageUrl = "EventImages/Al Azhar Mosque/1.webp"
                        },
                        new
                        {
                            Id = 32,
                            EventId = 11,
                            ImageUrl = "EventImages/Al Azhar Mosque/2.webp"
                        },
                        new
                        {
                            Id = 33,
                            EventId = 11,
                            ImageUrl = "EventImages/Al Azhar Mosque/3.webp"
                        },
                        new
                        {
                            Id = 34,
                            EventId = 12,
                            ImageUrl = "EventImages/Giza Plateau/1.webp"
                        },
                        new
                        {
                            Id = 35,
                            EventId = 12,
                            ImageUrl = "EventImages/Giza Plateau/2.webp"
                        },
                        new
                        {
                            Id = 36,
                            EventId = 12,
                            ImageUrl = "EventImages/Giza Plateau/3.webp"
                        },
                        new
                        {
                            Id = 37,
                            EventId = 13,
                            ImageUrl = "EventImages/El Gouna, Red Sea/1.webp"
                        },
                        new
                        {
                            Id = 38,
                            EventId = 13,
                            ImageUrl = "EventImages/El Gouna, Red Sea/2.webp"
                        },
                        new
                        {
                            Id = 39,
                            EventId = 13,
                            ImageUrl = "EventImages/El Gouna, Red Sea/3.webp"
                        },
                        new
                        {
                            Id = 40,
                            EventId = 15,
                            ImageUrl = "EventImages/40.jpg"
                        },
                        new
                        {
                            Id = 41,
                            EventId = 15,
                            ImageUrl = "EventImages/41.jpg"
                        },
                        new
                        {
                            Id = 42,
                            EventId = 15,
                            ImageUrl = "EventImages/42.jpg"
                        },
                        new
                        {
                            Id = 43,
                            EventId = 16,
                            ImageUrl = "EventImages/43.jpg"
                        },
                        new
                        {
                            Id = 44,
                            EventId = 16,
                            ImageUrl = "EventImages/44.jpg"
                        },
                        new
                        {
                            Id = 45,
                            EventId = 16,
                            ImageUrl = "EventImages/45.jpg"
                        },
                        new
                        {
                            Id = 46,
                            EventId = 17,
                            ImageUrl = "EventImages/46.jpg"
                        },
                        new
                        {
                            Id = 47,
                            EventId = 17,
                            ImageUrl = "EventImages/47.jpg"
                        },
                        new
                        {
                            Id = 48,
                            EventId = 17,
                            ImageUrl = "EventImages/48.jpg"
                        },
                        new
                        {
                            Id = 49,
                            EventId = 18,
                            ImageUrl = "EventImages/49.jpg"
                        },
                        new
                        {
                            Id = 50,
                            EventId = 18,
                            ImageUrl = "EventImages/50.jpg"
                        },
                        new
                        {
                            Id = 51,
                            EventId = 18,
                            ImageUrl = "EventImages/51.jpg"
                        },
                        new
                        {
                            Id = 52,
                            EventId = 19,
                            ImageUrl = "EventImages/52.jpg"
                        },
                        new
                        {
                            Id = 53,
                            EventId = 19,
                            ImageUrl = "EventImages/53.jpg"
                        },
                        new
                        {
                            Id = 54,
                            EventId = 19,
                            ImageUrl = "EventImages/54.jpg"
                        },
                        new
                        {
                            Id = 55,
                            EventId = 20,
                            ImageUrl = "EventImages/55.jpg"
                        },
                        new
                        {
                            Id = 56,
                            EventId = 20,
                            ImageUrl = "EventImages/56.jpg"
                        },
                        new
                        {
                            Id = 57,
                            EventId = 20,
                            ImageUrl = "EventImages/57.jpg"
                        },
                        new
                        {
                            Id = 58,
                            EventId = 21,
                            ImageUrl = "EventImages/58.jpg"
                        },
                        new
                        {
                            Id = 59,
                            EventId = 21,
                            ImageUrl = "EventImages/59.jpg"
                        },
                        new
                        {
                            Id = 60,
                            EventId = 21,
                            ImageUrl = "EventImages/60.jpg"
                        },
                        new
                        {
                            Id = 61,
                            EventId = 22,
                            ImageUrl = "EventImages/61.jpg"
                        },
                        new
                        {
                            Id = 62,
                            EventId = 22,
                            ImageUrl = "EventImages/62.jpg"
                        },
                        new
                        {
                            Id = 63,
                            EventId = 22,
                            ImageUrl = "EventImages/63.jpg"
                        },
                        new
                        {
                            Id = 64,
                            EventId = 23,
                            ImageUrl = "EventImages/64.jpg"
                        },
                        new
                        {
                            Id = 65,
                            EventId = 23,
                            ImageUrl = "EventImages/65.jpg"
                        },
                        new
                        {
                            Id = 66,
                            EventId = 23,
                            ImageUrl = "EventImages/66.jpg"
                        },
                        new
                        {
                            Id = 67,
                            EventId = 24,
                            ImageUrl = "EventImages/67.jpg"
                        },
                        new
                        {
                            Id = 68,
                            EventId = 24,
                            ImageUrl = "EventImages/68.jpg"
                        },
                        new
                        {
                            Id = 69,
                            EventId = 24,
                            ImageUrl = "EventImages/69.jpg"
                        },
                        new
                        {
                            Id = 70,
                            EventId = 25,
                            ImageUrl = "EventImages/70.jpg"
                        },
                        new
                        {
                            Id = 71,
                            EventId = 25,
                            ImageUrl = "EventImages/71.jpg"
                        },
                        new
                        {
                            Id = 72,
                            EventId = 25,
                            ImageUrl = "EventImages/72.jpg"
                        },
                        new
                        {
                            Id = 73,
                            EventId = 14,
                            ImageUrl = "EventImages/73.jpg"
                        },
                        new
                        {
                            Id = 74,
                            EventId = 14,
                            ImageUrl = "EventImages/74.jpg"
                        },
                        new
                        {
                            Id = 75,
                            EventId = 14,
                            ImageUrl = "EventImages/75.jpg"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Historical and Cultural"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Religious"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Festival"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Art"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Historicals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = "1171 AD / 1250 AD",
                            Description = "The Ayyubid state was founded by Saladin, who defeated the Fatimids and expelled them from Egypt in 567 AH / 1174 AD, and Egypt returned under the rule of the Abbasid Caliphate again.\r\n\r\nSaladin worked to spread the Sunni doctrine instead of the Shiite doctrine that was prevalent in the Fatimid era.\r\n\r\nThe Ayyubid state was a military state as it appeared during the Crusades in Egypt and the Levant.\r\n\r\nIn light of this political context, Saladin decided to build a castle in Cairo, which began construction in 527 AH / 1176 AD, but its completion was not completed during his lifetime, but later in 1208 AD. Therefore, the rule of Egypt extended to the Levant, the Hijaz, Yemen, Nubia and parts of North Africa. The Ayyubid era in Egypt lasted for 81 years and ended at the hands of the Mamluks.",
                            ImageUrl = "HistoricalImages/1.jpg",
                            Title = "Ayyubid State"
                        },
                        new
                        {
                            Id = 2,
                            Date = "1550 BC / 1069 BC",
                            Description = "During the New Kingdom, Egypt became a great empire that stretched across the ancient Near East, reaching as far south as the Fourth Cataract in Nubia, and as far north as the Levant. The Egyptian economy flourished to an astonishing degree, and most of the most famous and impressive ancient Egyptian monuments date back to this great period.\r\n\r\nThe Eighteenth Dynasty (1550-1295 BC) began with King Ahmose, who expelled the Hyksos, a Semitic people who ruled most of Egypt during the Second Intermediate Period. Most of the kings of the New Kingdom pursued an expansionist foreign policy in response to what had happened before, and the wealth generated by the expansions was used to carry out many construction projects throughout Egypt, especially at the Karnak Temple in Luxor, the most important temple of Amun, the lord of Thebes. Most of the kings of this dynasty were buried in the famous Valley of the Kings.\r\n\r\nArt, architecture, and the national economy reached new heights under Hatshepsut. Unfortunately, her husband, Thutmose II, did not rule for long, while his son from another wife, Thutmose III, was still too young to rule. So the Great Royal Wife Hatshepsut, perhaps in order to secure the throne of Egypt, declared herself king alongside her young stepson. Hatshepsut developed a new concept of kingship and linked herself to a divine birth from the god Amun to legitimize her reign, leaving a profound mark on the geographic, religious, and political landscape of Thebes.\r\n\r\nThutmose III proved to be the most capable king of all. During his reign, Egypt’s borders were extended farther, and his influence extended throughout the Nile Valley, including Nubia, leaving many monuments at the Karnak Temple, as Hatshepsut had done before. Peace was achieved in the region during the reign of his son Amenhotep II, and both the state of peace and increased international trade bore fruit under his successor Amenhotep III. Few kings matched him in the quality, scale, and quantity of his building projects, as he built many structures throughout Egypt and Nubia, including half of the Luxor Temple as it stands today.\r\n\r\nHowever, Amenhotep IV, son of Amenhotep III, changed his name to Akhenaten and declared his rebellion against the rest of the gods and that there is only one god, Aten, who was represented as the sun disk in the sky. His reign witnessed other revolutionary changes in royal ideology, art, architecture and language. However, he neglected Egypt's foreign affairs, and by the end of his reign, Egypt's lands in the Levant (the area of ​​Palestine, Lebanon and Syria) were lost.\r\n\r\nA turbulent period followed his reign, with Horemheb - a former army commander - ascending to the throne and completing the return of things to normal, appointing the commander Bar-Amesu as his successor. With his ascension to the throne under the name Ramesses I, the Nineteenth Dynasty (c. 1295-1186 BC) began, and his son Seti I succeeded him and ushered in an era of prosperity in Egypt. He also carried out many military campaigns, the most important of which were against the Hittites, who emerged as a new power in the ancient Near East, and regained much of Egypt's lost lands in the Levant.\r\n\r\nHis son Ramses II the Great was one of the most successful kings in ancient Egyptian history. During his long reign he waged many successful wars, achieved the first peace treaty with the Hittites, and left more monuments throughout Egypt than any other king. Meanwhile, his successor and son Merneptah launched a major attack against tribes called the \"Sea Peoples\", and by the end of his reign the Nineteenth Dynasty declined.\r\n\r\nWith the reign of King Setnakht, founder of the Twentieth Dynasty (1896-1069 BC), order returned to the country, and his son Ramses III was the last great warrior of the New Kingdom. After him, the state deteriorated steadily until it was divided into two parts. The next dynasty ruled only Lower Egypt, while Upper Egypt remained under the rule of the priests.\r\nThe New Kingdom",
                            ImageUrl = "HistoricalImages/8.jpeg",
                            Title = "Modern State"
                        },
                        new
                        {
                            Id = 3,
                            Date = "868 AD / 905 AD",
                            Description = "The Tulunids established the first independent state in Egypt during the Abbasid era, during which Egypt was able to retain all its wealth. Ahmed Ibn Tulun, the founder of the Tulunid state, carried out many economic and cultural reforms, where he began by establishing a new administrative capital called Al-Qata'i, and built his mos\r\nque, currently known as the Ibn Tulun Mosque. The rule of the Tulunids lasted for about thirty-five years, after which came the Ikhshidids.",
                            ImageUrl = "HistoricalImages/12.jpg",
                            Title = "Tulunid State"
                        },
                        new
                        {
                            Id = 4,
                            Date = "912 AD / 1171 AD",
                            Description = "The Fatimid state was the golden age of Egypt, in which Islamic art was completed, as Egyptian artists left behind many monuments and artifacts that testify to their superior skill and precision in various artistic forms.\r\nThe Fatimids invaded Egypt in 358 AH / 969 AD, then established a new city north of Fustat, which they called \"Cairo\", making it their capital. Al-Azhar Mosque was the first mosque they built in Cairo.",
                            ImageUrl = "HistoricalImages/16.jpg",
                            Title = "Fatimid State"
                        },
                        new
                        {
                            Id = 5,
                            Date = "2686 BC / 2181 BC",
                            Description = "The Old Kingdom extends through the third to sixth dynasties, as the king's power increased during that period. King Djoser, the first king of the Third Dynasty, built his step pyramid in Saqqara. He wanted to build a mastaba-shaped tomb in the style of his predecessors, the kings of the First and Second Dynasties, but those mastabas increased to reach about five mastabas, one above the other.To be the first stone step pyramid in the country's history. But his successors were unable to complete their pyramids, perhaps due to the short duration of their rule.\r\nWe do not know much about King Huni, the first king of the Fourth Dynasty, while the second king, Senefru (2613-2589 BC), was very powerful and advanced. He alone built three pyramids, the first of which was in the city of Meidum, which began as a step pyramid and then ended as a complete pyramid. . As for the second, he built it in Dahshur and is known as the Bent Pyramid or the Broken Pyramid. It was the first attempt to build a pyramid.Complete, but its construction was not completed as he wanted, while the third pyramid, known as the Red Pyramid in Dahshur, was the first complete pyramid in Egypt, which opened the way for the construction of complete pyramids. This was achieved during the reign of his successor, King Khufu (c. 2589 - 2566 BC), who built the largest pyramid and pyramid group. The Great Pyramid, with an original height of 146.5 metres, was the tallest building in the world for 3,800 years. Khufu's son and successor, Ra (about 2566 - 2558 BC), did not complete his pyramid at Abu Rawash.\r\nHe was succeeded by Khafre (ca. 2555 - 2532 BC), during whose reign he carved the Great Sphinx and built a pyramid nearly the size of his father's pyramid. As for the two temples connected to the pyramid, they were larger and more detailed than the temples of its predecessors.\r\nThe pyramid of Menkaure (2532 - 2503 BC), son of King Khafre, is considered an example of the beginning of the decline of royal authority. Although his pyramid was considerably smaller than its predecessors, at least a quarter of it was covered in granite, a stone brought from Aswan that was difficult to obtain and transport. Moreover, the temples adjacent to his temple are relatively larger than their predecessors, indicating a shift in the king's priorities from his tomb to the worship to be practiced in these temples.\r\nThis trend grew more pronounced during the Fifth Dynasty (ca. 2449 - 2487 BC) and the Sixth Dynasty (ca. 2345 - 1821 BC). The last king of the Fifth Dynasty, Unas, ordered the creation of inscriptions inside his pyramid at Saqqara, known as the Pyramid Texts, an introduction to a famous series of texts known as the Book of the Dead. The purpose of these texts was to help the king successfully reach the afterlife and become a deity.\r\nBeginning in the Sixth Dynasty it became clear that the king's authority had declined. In addition to other factors, by the end of the long reign of its last king, Pipi II (c. 278-2184 BC), Egypt was no longer under the control of a central government.",
                            ImageUrl = "HistoricalImages/22.webp",
                            Title = "Old Kingdom"
                        },
                        new
                        {
                            Id = 6,
                            Date = "2055 BC / 1650 BC",
                            Description = "The Middle Kingdom was a period of great prosperity, consisting of the Eleventh to Thirteenth Dynasties. Although the Eleventh Dynasty had its origins in the First Intermediate Period, the last king of this era who succeeded in unifying Egypt, thus beginning the Middle Kingdom, was King Nebhepetre Mentuhotep (ca. 2055 - 2004 BC). The Eleventh Dynasty came from Thebes (now Luxor). It was not an important city during that period, but it will become one of the most prominent and important cities in Egypt during the rest of ancient Egyptian history\r\nBecause of his Theban origins, Nebhepetre-Mentuhotep was buried on the western mainland of Thebes in the Deir el-Bahri area. His tomb included a temple for his funeral rituals. The tomb was partly cut into a rocky slope, while part of it was built in the form of a terrace that included an ascending middle slope. This temple was clearly a partial inspiration for the neighboring and more famous temple of Queen Hatshepsut to its immediate left.\r\nLittle is known about Mentuhotep III and IV, the last rulers of the Eleventh Dynasty. Amenemhat I (1985-1955 BC) was the first king of the Twelfth Dynasty (1985-1795 BC) and was probably the vizier of Mentuhotep IV. The kings of this highly successful dynasty consolidated the authority of the central government over all of Egypt, and during this period the powerful provincial rulers were reined in.They also undertook building projects throughout the country, strengthened its borders, sent mining expeditions, and encouraged trade voyages. A series of forts, such as those at Bohn, Semna and Ascot, not only served as defensive fortresses but regulated the movement of incoming Nubian traders and were bases for mining and military operations. The reign of Kings Senusret III (1874-1855 BC) and Amenemhat III (1850-1808 BC) was particularly prosperous.\r\nHuge agricultural projects were implemented during that period, especially in the Fayoum region in Central Egypt, where canals were dug, part of the lake was dredged, and the resulting lands were reclaimed for agriculture. The kings of the Twelfth Dynasty in this region were buried in huge pyramids near the new capital founded by Amenemhat I, which was called Etet Tawi, meaning the Holder of the Two Lands, and its exact location is still unknown.\r\nThe Middle Kingdom represented an important shift in the history of ancient Egyptian culture, as its most important contributions to ancient Egyptian language and literature were: new linguistic structures emerged and many new literary texts were written, many of which remain popular for more than a millennium. The language used to write these texts, with its grammatical rules, is called the Middle Egyptian language, which will serve as the language of official texts until the Ptolemaic era (332-30 BC) and the Roman era (30 BC - 395 AD).",
                            ImageUrl = "HistoricalImages/26.jpg",
                            Title = "Middle Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            Date = "661 AD / 750 AD",
                            Description = "The Umayyad Caliphate was founded by Muawiyah ibn Abi Sufyan, and the Umayyad rule lasted for nearly a century.\r\nThe borders of the Umayyad state extended to Europe and the edges of Asia, however, the caliphate collapsed during the reign of Caliph Hisham ibn Abd al-Malik.\r\nDamascus was the center of government, and Egypt was one of its states. Amr ibn al-Aas was appointed governor of Egypt for the second time by Caliph Muawiyah ibn Abi Sufyan (38-43 AH), and he is considered the first ruler of Egypt during this period.",
                            ImageUrl = "HistoricalImages/31.jpg",
                            Title = "Umayyad era"
                        },
                        new
                        {
                            Id = 8,
                            Date = "332 BC / 30 BC",
                            Description = "Egypt became part of the Macedonian Empire after Alexander the Great defeated the Persian king Darius III in 332 BC. After Alexander's death in 323 BC and the division of his estate among his generals, Egypt came under the rule of Ptolemy I (Soter), who made Egypt an independent kingdom known as the Ptolemaic state.\r\nPtolemy I completed the construction of the new capital of Egypt - Alexandria, and began building the Lighthouse of Alexandria and gathered both Egyptian and Greek priests in order to establish a new faith that would unite Egyptians and Greeks together. During the reign of his successor, Ptolemy II, the arts and sciences flourished and the ancient Library of Alexandria was established, which was the largest library in the ancient world, which led to the influx of Greek scholars and thinkers to Egypt and increased cultural diversity and merged the new Greek civilization with the ancient Egyptian civilization.\r\nVarious Greek settlements were established in Egypt during the Ptolemaic period as major central areas for Greek citizens who came to Egypt with their culture and traditions, such as \"Ptolemae\" in Upper Egypt, \"Philadelphia\" in Fayoum, and \"Naukratis\", which was the first Greek settlement and a center of trade between Egyptians and Greeks in the Delta, which was established during the Late Period. In the ancient capital of Memphis, Greek settlers established their settlement around the main temple of Ptah in the early Ptolemaic period. The rule of the Ptolemies in Egypt came to a tragic end when they were defeated by the Romans at the Battle of Actium in 31 BC, which led to the suicide of Queen Cleopatra VII and the killing of her son, Ptolemy XV Caesarion.",
                            ImageUrl = "HistoricalImages/36.jpg",
                            Title = "Ptolemaic era"
                        },
                        new
                        {
                            Id = 9,
                            Date = "30 BC / 395 AD",
                            Description = "After the naval battle of Actium and the defeat of Antony and Queen Cleopatra VII in 31 BC by the commander Octavian (Augustus), Egypt lost its independence and became a province of the new empire ruled by the Roman emperor, who was installed as pharaoh and the country was divided into three regions, each ruled by a local governor, but all of them were under the authority of the emperor.\r\nThings Egypt exploited Egypt Abad, and some emperors were interested in Egypt in particular, such as the Roman emperor Hadrian who visited Egypt and established the new Roman tariff called \"Antineopolis\", and the Romans talked about new agricultural techniques where they built new water chambers and dams, in addition to increasing grain production and expanding the cultivation of wine. All of these agricultural divisions include their primary goal to be the \"breadbasket of the ancient world\" and nothing more.\r\nLife in Egypt was influenced by a multi-festival culture during the Roman Empire and was involved in artistic influences from Greek and Roman culture, leading to the emergence of a unique artistic style and demonstrating the Egyptian intellectual influence in the spread of the worship of Isis throughout the Roman Empire.\r\nIn 285 AD the Roman Empire was divided into an Eastern and Western Empire, and the new state ended with the fall of Rome to the attacks of the Berbers, while the Eastern Empire took control and became known as the Byzantine Empire in 330 AD.",
                            ImageUrl = "HistoricalImages/41.jpg",
                            Title = "Roman era"
                        },
                        new
                        {
                            Id = 10,
                            Date = "750 AD / 1517 AD",
                            Description = "Abdullah al-Saffah ibn Muhammad (Abu al-Abbas al-Saffah) is the founder of the Abbasid state. He came to power after the Abbasids defeated the Umayyads in 132 AH / 750 AD. Their rule of the country extended to eight centuries, and the Abbasids were the ones who represented the political legitimacy of Muslims at that time. The Abbasid Empire was one of the largest empires, and Kufa in Iraq was the capital at first, then Caliph Abu Jaafar al-Mansur founded the city of Baghdad and moved the capital to it.",
                            ImageUrl = "HistoricalImages/46.jpg",
                            Title = "Abbasid era"
                        },
                        new
                        {
                            Id = 11,
                            Date = "1382 AD / 1517 AD",
                            Description = "The Circassian Mamluks founded their state in 784 AH/1382 AD through Sayf al-Din Barquq. Their roots go back to the reign of al-Mansur Qalawun, who used them extensively in his army. This group was loyal to him when he became a military general. One of these Circassian Mamluks, Barquq, became the most important and powerful man in the state. His ascension to the throne marked the beginning of the Circassian Mamluk dynasty. They were also called Burji (derived from \"tower\") Mamluks, as they occupied the citadel and its towers. Egypt witnessed architectural and artistic progress during the Mamluk era, although it was an unstable period. The Circassian Mamluks ruled Egypt for about 135 years under 23 alternating sultans. The defeat of Sultan Tuman Bay marked the beginning of the Ottoman era.",
                            ImageUrl = "HistoricalImages/51.webp",
                            Title = "Circassian Mamluk State (Burji)"
                        },
                        new
                        {
                            Id = 12,
                            Date = "1517 AD / 1805 AD",
                            Description = "Ottoman rule in Egypt began with the victory of Sultan Selim I over the Mamluk Sultan Tuman Bay in the Battle of Ridaniya in 1517 AD. Egypt became a province subject to the Ottomans, and the capital of the Ottoman Empire was in Constantinople. Ottoman rule in Egypt continued until the beginning of the French campaign in Egypt in (1798-1801 AD), then Ottoman rule returned again until 1805 AD. No important political developments occurred in Egypt during this period, other than the ongoing competition between the Ottoman and Mamluk rulers.",
                            ImageUrl = "HistoricalImages/56.webp",
                            Title = "Ottoman era"
                        },
                        new
                        {
                            Id = 13,
                            Date = "1805 AD / 1953 AD",
                            Description = "This period was founded by Muhammad Ali Pasha, and his family's rule lasted for more than one hundred and fifty years. Science, art, and culture developed and flourished during this period, and Egypt became one of the greatest kingdoms of the East, as Muhammad Ali planned for the modernization of the country. His plan included new educational, agricultural, and industrial systems, and the establishment of a strong military base. As for architectural development, it began during the reign of Khedive Ismail, who wanted to make Cairo the Paris of the East, as he worked to a large extent on developing the construction features, so he deserves the title of \"the second founder of modern Egypt\" after Muhammad Ali. During his reign, the seat of government was moved from the Citadel to Abdeen Palace. Khedive Abbas Hilmi II continued to establish the modern state, where the Egyptian University (currently known as Cairo University) was built. Then Egypt became a kingdom during the reign of King Fuad I, who founded many scientific institutions. He was succeeded by King Farouk. Until the 1952 revolution, the rule of the royal family in Egypt ended in 1953.",
                            ImageUrl = "HistoricalImages/63.jpg",
                            Title = "The era of the Muhammad Ali dynasty"
                        },
                        new
                        {
                            Id = 14,
                            Date = "632 AD / 661 AD ",
                            Description = "This era was named after the four Rightly Guided Caliphs who succeeded the Prophet Muhammad, may God bless him and grant him peace, in ruling the Islamic state. This era is considered one of the greatest eras in Islamic history. The fierce wars between the Persians and the Romans had exhausted their forces, which contributed to the expansion of the Islamic state at their expense. In 20 AH/641 AD, Caliph Omar bin Al-Khattab (13-23 AH/634-644 AD) conquered Egypt and freed it from the Byzantine occupation, which in turn had occupied it after expelling the Sassanid Persians. Egypt was conquered by the commander Amr bin Al-Aas, who made Alexandria his capital. However, Caliph Omar bin Al-Khattab refused the order because he wanted the capital of Egypt to be close to Medina, the capital of the Caliphate. Therefore, Ibn Al-Aas, as governor of Egypt, built a new capital for the country, the city of Fustat, on whose ruins the city of Cairo was built 300 years later to remain the capital of Egypt.",
                            ImageUrl = "HistoricalImages/69.jpg",
                            Title = "The era of the Rightly Guided Caliphs"
                        },
                        new
                        {
                            Id = 15,
                            Date = "5500 BC / 3100 BC",
                            Description = "This name covers the period of ancient Egyptian prehistory, beginning with the Old Stone Age (Paleolithic), and ending with the end of the New Stone Age (Neolithic). The term \"prehistory\" refers to the pre-writing stage in Egypt. Writing appeared at about the same time as the end of the Stone Age, around 3100 BC. This is the period in which Egypt emerged as a unified political entity, making it the oldest country in the world\r\nBefore the formation of the Egyptian state and during the Neolithic, an increasing homogeneity can be seen between the different civilizations that emerged along the Nile Valley, with those civilizations being named after their original sites. Among the most important of them is the Maadi civilization (4000 - 3100 BC) in Lower Egypt. The Badari civilization (ca. 500-4000 BC) near Asyut and Naqada I (ca. 4000-3500 BC) in Upper Egypt near Luxor.\r\nLike the rest of its contemporaries, Naqada I reveals little about social stratification, but this changed by the end of this period. This trend became more evident during Naqada II (ca. 3500 - 3200 BC), which began to spread along the Nile Valley. Among the most important Naqada II sites, besides Naqada itself, were Hierakonpolis (Kom el-Ahmar) near Edfu, and Abydos in Upper Egypt. During the Naqada III civilization (ca. 3500 - 3100 BC),The community continued to grow more complex and diverged from and politically separated itself from contemporary Nubian culture. The transition from the Naqada III civilization to the early dynastic period was smooth, which is why Naqada III is sometimes called the “Zero Dynasty.”\r\nIt appears that the powerful regional leaders during this period already controlled most, if not all, of the land of Egypt. There was a difference between Upper and Lower Egypt geographically. This difference remained apparent until the late prehistoric era, and the ancient Egyptians did not forget this matter throughout their ancient history despite the unity. When Egypt eventually became unified as a single political entity under one ruler, the ancient Egyptians referred to their king as “Lord of the Two Lands.",
                            ImageUrl = "HistoricalImages/71.jpg",
                            Title = "Pre-dynastic era"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoricalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalId");

                    b.ToTable("HistoricalImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HistoricalId = 1,
                            ImageUrl = "HistoricalImages/2.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HistoricalId = 1,
                            ImageUrl = "HistoricalImages/3.jpg"
                        },
                        new
                        {
                            Id = 3,
                            HistoricalId = 1,
                            ImageUrl = "HistoricalImages/4.jpg"
                        },
                        new
                        {
                            Id = 4,
                            HistoricalId = 1,
                            ImageUrl = "HistoricalImages/5.jpg"
                        },
                        new
                        {
                            Id = 5,
                            HistoricalId = 2,
                            ImageUrl = "HistoricalImages/6.jpeg"
                        },
                        new
                        {
                            Id = 6,
                            HistoricalId = 2,
                            ImageUrl = "HistoricalImages/7.jpeg"
                        },
                        new
                        {
                            Id = 7,
                            HistoricalId = 2,
                            ImageUrl = "HistoricalImages/9.jpeg"
                        },
                        new
                        {
                            Id = 8,
                            HistoricalId = 2,
                            ImageUrl = "HistoricalImages/10.jpeg"
                        },
                        new
                        {
                            Id = 9,
                            HistoricalId = 3,
                            ImageUrl = "HistoricalImages/11.jpg"
                        },
                        new
                        {
                            Id = 10,
                            HistoricalId = 3,
                            ImageUrl = "HistoricalImages/13.jpg"
                        },
                        new
                        {
                            Id = 11,
                            HistoricalId = 3,
                            ImageUrl = "HistoricalImages/14.jpg"
                        },
                        new
                        {
                            Id = 12,
                            HistoricalId = 3,
                            ImageUrl = "HistoricalImages/15.jpg"
                        },
                        new
                        {
                            Id = 13,
                            HistoricalId = 4,
                            ImageUrl = "HistoricalImages/17.jpg"
                        },
                        new
                        {
                            Id = 14,
                            HistoricalId = 4,
                            ImageUrl = "HistoricalImages/18.jpg"
                        },
                        new
                        {
                            Id = 15,
                            HistoricalId = 4,
                            ImageUrl = "HistoricalImages/19.jpg"
                        },
                        new
                        {
                            Id = 16,
                            HistoricalId = 4,
                            ImageUrl = "HistoricalImages/20.jpg"
                        },
                        new
                        {
                            Id = 17,
                            HistoricalId = 5,
                            ImageUrl = "HistoricalImages/21.jpg"
                        },
                        new
                        {
                            Id = 18,
                            HistoricalId = 5,
                            ImageUrl = "HistoricalImages/23.jpg"
                        },
                        new
                        {
                            Id = 19,
                            HistoricalId = 5,
                            ImageUrl = "HistoricalImages/24.jpg"
                        },
                        new
                        {
                            Id = 20,
                            HistoricalId = 5,
                            ImageUrl = "HistoricalImages/25.jpg"
                        },
                        new
                        {
                            Id = 21,
                            HistoricalId = 6,
                            ImageUrl = "HistoricalImages/27.jpg"
                        },
                        new
                        {
                            Id = 22,
                            HistoricalId = 6,
                            ImageUrl = "HistoricalImages/28.jpg"
                        },
                        new
                        {
                            Id = 23,
                            HistoricalId = 6,
                            ImageUrl = "HistoricalImages/29.jpg"
                        },
                        new
                        {
                            Id = 24,
                            HistoricalId = 6,
                            ImageUrl = "HistoricalImages/30.jpg"
                        },
                        new
                        {
                            Id = 25,
                            HistoricalId = 7,
                            ImageUrl = "HistoricalImages/32.jpeg"
                        },
                        new
                        {
                            Id = 26,
                            HistoricalId = 7,
                            ImageUrl = "HistoricalImages/33.jpg"
                        },
                        new
                        {
                            Id = 27,
                            HistoricalId = 7,
                            ImageUrl = "HistoricalImages/34.jpg"
                        },
                        new
                        {
                            Id = 28,
                            HistoricalId = 7,
                            ImageUrl = "HistoricalImages/35.jpg"
                        },
                        new
                        {
                            Id = 29,
                            HistoricalId = 8,
                            ImageUrl = "HistoricalImages/37.jpg"
                        },
                        new
                        {
                            Id = 30,
                            HistoricalId = 8,
                            ImageUrl = "HistoricalImages/38.jpg"
                        },
                        new
                        {
                            Id = 31,
                            HistoricalId = 8,
                            ImageUrl = "HistoricalImages/39.jpg"
                        },
                        new
                        {
                            Id = 32,
                            HistoricalId = 8,
                            ImageUrl = "HistoricalImages/40.jpg"
                        },
                        new
                        {
                            Id = 33,
                            HistoricalId = 9,
                            ImageUrl = "HistoricalImages/42.jpg"
                        },
                        new
                        {
                            Id = 34,
                            HistoricalId = 9,
                            ImageUrl = "HistoricalImages/43.jpg"
                        },
                        new
                        {
                            Id = 35,
                            HistoricalId = 9,
                            ImageUrl = "HistoricalImages/44.jpg"
                        },
                        new
                        {
                            Id = 36,
                            HistoricalId = 9,
                            ImageUrl = "HistoricalImages/45.jpg"
                        },
                        new
                        {
                            Id = 37,
                            HistoricalId = 10,
                            ImageUrl = "HistoricalImages/47.jpg"
                        },
                        new
                        {
                            Id = 38,
                            HistoricalId = 10,
                            ImageUrl = "HistoricalImages/48.jpg"
                        },
                        new
                        {
                            Id = 39,
                            HistoricalId = 10,
                            ImageUrl = "HistoricalImages/49.jpg"
                        },
                        new
                        {
                            Id = 40,
                            HistoricalId = 10,
                            ImageUrl = "HistoricalImages/50.jpg"
                        },
                        new
                        {
                            Id = 41,
                            HistoricalId = 11,
                            ImageUrl = "HistoricalImages/52.jpg"
                        },
                        new
                        {
                            Id = 42,
                            HistoricalId = 11,
                            ImageUrl = "HistoricalImages/53.jpg"
                        },
                        new
                        {
                            Id = 43,
                            HistoricalId = 11,
                            ImageUrl = "HistoricalImages/54.jpg"
                        },
                        new
                        {
                            Id = 44,
                            HistoricalId = 11,
                            ImageUrl = "HistoricalImages/55.jpg"
                        },
                        new
                        {
                            Id = 45,
                            HistoricalId = 12,
                            ImageUrl = "HistoricalImages/57.jpg"
                        },
                        new
                        {
                            Id = 46,
                            HistoricalId = 12,
                            ImageUrl = "HistoricalImages/58.jpg"
                        },
                        new
                        {
                            Id = 47,
                            HistoricalId = 12,
                            ImageUrl = "HistoricalImages/59.jpg"
                        },
                        new
                        {
                            Id = 48,
                            HistoricalId = 12,
                            ImageUrl = "HistoricalImages/60.webp"
                        },
                        new
                        {
                            Id = 49,
                            HistoricalId = 13,
                            ImageUrl = "HistoricalImages/61.jpg"
                        },
                        new
                        {
                            Id = 50,
                            HistoricalId = 13,
                            ImageUrl = "HistoricalImages/62.jpg"
                        },
                        new
                        {
                            Id = 51,
                            HistoricalId = 13,
                            ImageUrl = "HistoricalImages/64.jpg"
                        },
                        new
                        {
                            Id = 52,
                            HistoricalId = 13,
                            ImageUrl = "HistoricalImages/65.jpg"
                        },
                        new
                        {
                            Id = 53,
                            HistoricalId = 14,
                            ImageUrl = "HistoricalImages/66.jpg"
                        },
                        new
                        {
                            Id = 54,
                            HistoricalId = 14,
                            ImageUrl = "HistoricalImages/67.jpg"
                        },
                        new
                        {
                            Id = 55,
                            HistoricalId = 14,
                            ImageUrl = "HistoricalImages/68.jpg"
                        },
                        new
                        {
                            Id = 56,
                            HistoricalId = 14,
                            ImageUrl = "HistoricalImages/70.jpg"
                        },
                        new
                        {
                            Id = 57,
                            HistoricalId = 15,
                            ImageUrl = "HistoricalImages/72.jpg"
                        },
                        new
                        {
                            Id = 58,
                            HistoricalId = 15,
                            ImageUrl = "HistoricalImages/73.jpeg"
                        },
                        new
                        {
                            Id = 59,
                            HistoricalId = 15,
                            ImageUrl = "HistoricalImages/74.jpg"
                        },
                        new
                        {
                            Id = 60,
                            HistoricalId = 15,
                            ImageUrl = "HistoricalImages/75.jpg"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo international Airport terminal 3, Heliopolis, 11341 Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/19xBNPS8M2/",
                            ImageUrl = "Hotels/Cairo/1.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3451.3169529673273!2d31.395847200000006!3d30.1137427!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14581655c2fefa93%3A0x855d24c50d9a251!2z2YTZiCDZhdmK2LHZitiv2YrYp9mGINmF2LfYp9ixINin2YTZgtin2YfYsdip!5e0!3m2!1sar!2seg!4v1742149560840!5m2!1sar!2seg",
                            LocationName = "Cairo",
                            Name = "Le Meridien Cairo Airport",
                            PhoneNumber = "+202-22659600",
                            PricePerHour = 5812.0,
                            Rate = 4.2000000000000002,
                            WebSite = "https://www.marriott.com/en-us/hotels/caiam-le-meridien-cairo-airport/overview/"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Corniche El Nile, Garden City, Cairo",
                            Facebook = "https://www.facebook.com/share/1EjVfEV71A/",
                            ImageUrl = "Hotels/Cairo/2.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3454.076091286725!2d31.2294302!3d30.0346748!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145847eb19741479%3A0x6f4f4b9d21f639e1!2z2YfZitmE2KrZiNmGINin2YTZgtin2YfYsdipINis2LHYp9mG2K8g2YbYp9mK2YQ!5e0!3m2!1sar!2seg!4v1742149673321!5m2!1sar!2seg",
                            LocationName = "Cairo",
                            Name = "Hilton Cairo Grand Nile",
                            PhoneNumber = "0-223651234",
                            PricePerHour = 6400.0,
                            Rate = 3.7999999999999998,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwj6lfPF_4uMAxXsa0ECHbnaFVMYABAEGgJ3cw&co=1&ase=2&gclid=EAIaIQobChMI-pXzxf-LjAMV7GtBAh252hVTEAAYASAAEgK3afD_BwE&ohost=www.google.com&cid=CAASJeRoTO3di9EUVIgV7C3WwqJMXHsOhdz4AF8DeGrvCpcDDz6EZx0&sig=AOD64_0sDqYVCCLNjHXPtzKU7Z81PrausA&q&nis=4&adurl&ved=2ahUKEwi2ie3F_4uMAxU9aqQEHbD2MR4Q0Qx6BAgmEAE"
                        },
                        new
                        {
                            Id = 3,
                            Address = "1089 Corniche El Nil - Garden City, Garden City, 11519 Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1D9key9seU/",
                            ImageUrl = "Hotels/Cairo/3.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3454.0216686198137!2d31.2320317!3d30.0362362!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145840cd3ef57809%3A0xd7f50b4221f71eb0!2z2YHZhtiv2YIg2YHZiNixINiz2YrYstmI2YYg2YbYp9mK2YQg2KjZhNin2LLYpyDYp9mE2YLYp9mH2LHZhw!5e0!3m2!1sar!2seg!4v1742149822971!5m2!1sar!2seg",
                            LocationName = "Cairo",
                            Name = "Four Seasons Hotel Cairo at Nile Plaza",
                            PhoneNumber = "20227917000",
                            PricePerHour = 14500.0,
                            Rate = 4.7000000000000002,
                            WebSite = "https://www.fourseasons.com/caironp/"
                        },
                        new
                        {
                            Id = 4,
                            Address = "1115 Corniche El Nile, Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1BiBZudYV5/",
                            ImageUrl = "Hotels/Cairo/4.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3453.5290920453067!2d31.234616!3d30.050365!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145840c381a29537%3A0xf1d5b3a64a0e4de1!2z2YfZitmE2KrZiNmGINix2YXYs9mK2LM!5e0!3m2!1sar!2seg!4v1742149918000!5m2!1sar!2seg",
                            LocationName = "Cairo",
                            Name = "Ramses Hilton Hotel & Casino",
                            PhoneNumber = "+20225777444",
                            PricePerHour = 6500.0,
                            Rate = 4.0,
                            WebSite = "https://www.hilton.com/en/hotels/cairhtw-ramses-hilton/"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Kasr El Nile, Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1ZTLj6XCvb/",
                            ImageUrl = "Hotels/Cairo/5.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3453.655892501945!2d31.2378339!3d30.0467285!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145840c6e7b40217%3A0xa56e70b7cb4fa53d!2z2LTYqtmK2KzZhtio2LHYrNix!5e0!3m2!1sar!2seg!4v1742149990173!5m2!1sar!2seg",
                            LocationName = "Cairo",
                            Name = "Steigenberger Hotel El Tahrir Cairo",
                            PhoneNumber = "0-225750777",
                            PricePerHour = 5500.0,
                            Rate = 3.8999999999999999,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwjSl4S_iIyMAxUrCqIDHUHaF3AYABAEGgJsZQ&co=1&gclid=EAIaIQobChMI0peEv4iMjAMVKwqiAx1B2hdwEAAYAiAAEgLKRvD_BwE&ohost=www.google.com&cid=CAASJeRoqb3A8_W_cCI2Psh5SfgGlWkPy5sBG63KSSJLTrvfQUMPBi4&sig=AOD64_1-nv5EhB35HIIna2-AlbmHpbeh7A&q&adurl&ved=2ahUKEwjpk_2-iIyMAxWhR_EDHZMFLEUQ0Qx6BAgUEAQ"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Al-Sahaby Lan, In Front Of Luxor Temple, East Bank, 99999 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/1ADhARSWdh/",
                            ImageUrl = "Hotels/Luxor/6.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3595.0867571344843!2d32.644454!3d25.7015514!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x144915793ddb0125%3A0xe6577d403df25035!2sNefertiti%20Hotel%20Luxor!5e0!3m2!1sar!2seg!4v1742150165519!5m2!1sar!2seg",
                            LocationName = "Luxor",
                            Name = "Nefertiti Hotel Luxor",
                            PhoneNumber = "010 00329991",
                            PricePerHour = 2200.0,
                            Rate = 3.5,
                            WebSite = "https://www.nefertitihotel.com/"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Corniche El Nile Street, East Bank, Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/19x25D4GZe/",
                            ImageUrl = "Hotels/Luxor/7.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3595.479246270187!2d32.6339694!3d25.6885519!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x144914291e2ae293%3A0xa1bb33e69e24c44f!2z2YHZhtiv2YIg2LPZiNmG2LPYqtinINiz2KfZhiDYrNmI2LHYrCDYp9mE2KfZgti12LE!5e0!3m2!1sar!2seg!4v1742150217456!5m2!1sar!2seg",
                            LocationName = "Luxor",
                            Name = "Sonesta St. George Hotel - Convention Center",
                            PhoneNumber = "0-952382575",
                            PricePerHour = 7000.0,
                            Rate = 4.4000000000000004,
                            WebSite = "https://www.sonesta.com/sonesta-hotels-resorts/egy/luxor/sonesta-st-george-hotel-luxor"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Awameya Road, Kings Island, East Bank, Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/1AQsRLfAoM/",
                            ImageUrl = "Hotels/Luxor/8.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3596.1693568342284!2d32.6242926!3d25.6656801!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x144916af72fd4d79%3A0x57e2897fa81e3b0a!2z2YXZhtiq2KzYuSDZiNiz2KjYpyDYrNmI2YTZiiDZgdmK2YQg2YPZitmG2KzYsiDZgdin2YTZig!5e0!3m2!1sar!2seg!4v1742150332237!5m2!1sar!2seg",
                            LocationName = "Luxor",
                            Name = "Jolie Ville Hotel & Spa Kings Island Luxor",
                            PhoneNumber = "0-952274855",
                            PricePerHour = 6000.0,
                            Rate = 4.0999999999999996,
                            WebSite = "https://jolievilleluxor.com/"
                        },
                        new
                        {
                            Id = 9,
                            Address = "17, Cornish El Nile Street, Beside Luxor Temple, East Bank, 99999 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/15nAkdSbP8/",
                            ImageUrl = "Hotels/Luxor/9.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3595.2265430706807!2d32.6386596!3d25.6969223!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145840cfc0b0c23f%3A0xc5c45a5bffb2eec1!2sPavillon%20Winter%20Luxor!5e0!3m2!1sar!2seg!4v1742150453090!5m2!1sar!2seg",
                            LocationName = "Luxor",
                            Name = "Pavillon Winter Luxor",
                            PhoneNumber = "0-952380425",
                            PricePerHour = 7000.0,
                            Rate = 4.5999999999999996,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwjDgYfKmoyMAxV5BQYAHRrGM7wYABAEGgJ3cw&ae=2&aspm=1&co=1&ase=5&gclid=EAIaIQobChMIw4GHypqMjAMVeQUGAB0axjO8EAAYASAAEgLgRvD_BwE&ei=rYLVZ7vmL6SLxc8P9cOYkAw&ohost=www.google.com&cid=CAASJeRoS2XDjppD17JTFEutBMaPIvZPSH-pw60RI3ka_-LGXrL7l10&sig=AOD64_3re-b14AO6-AkKUHYmMwsAlmfK-w&q&sqi=2&adurl&ved=2ahUKEwj78IDKmoyMAxWkRfEDHfUhBsIQ0Qx6BAgSEAE"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Al Qarna Road, West Bank, 85951 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/16QVjxXGGN/",
                            ImageUrl = "Hotels/Luxor/10.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3594.9708363816444!2d32.6351208!3d25.7053896!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14491592df0f6151%3A0x6be287cee355d461!2sKEMET%20GUEST%20HOUSE!5e0!3m2!1sar!2seg!4v1742150577610!5m2!1sar!2seg",
                            LocationName = "Luxor",
                            Name = "Kemet House",
                            PhoneNumber = "0-1016649967",
                            PricePerHour = 9000.0,
                            Rate = 3.7000000000000002,
                            WebSite = "https://kemet-house.com/"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Aswan, Corniche El Nile Baharive, Abu El Rish Qebli, 81111 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/15jBHzKKJn/",
                            ImageUrl = "Hotels/Aswan/11.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3640.3629139021627!2d32.88114108501082!3d24.159001984389537!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1436651db3b6c23d%3A0xde30386aed0ad246!2z2LPZiNmG2LPYqtinINmG2YjYqNipINij2LPZiNin2YY!5e0!3m2!1sar!2seg!4v1742150701997!5m2!1sar!2seg",
                            LocationName = "Aswan",
                            Name = "Sonesta Nouba Hotel Aswan",
                            PhoneNumber = "011 18837500",
                            PricePerHour = 9000.0,
                            Rate = 4.2999999999999998,
                            WebSite = "https://www.sonesta.com/sonesta-hotels-resorts/egy/qism-aswan/sonesta-nouba-hotel-aswan"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Corniche El Nil, 99999 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/12JNbMmPysK/",
                            ImageUrl = "Hotels/Aswan/12.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d29139.651365378886!2d32.9054227!3d24.0854396!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14367b4e73fa6fcf%3A0x11847bbcad585364!2z2YHZhtiv2YIg2KjZitix2KfZhdmK2LLYpyDYpdmK2YTYp9mG2K8g2KPYs9mI2KfZhg!5e0!3m2!1sar!2seg!4v1742150765720!5m2!1sar!2seg",
                            LocationName = "Aswan",
                            Name = "Pyramisa Island Hotel Aswan",
                            PhoneNumber = "20 97-231-7400",
                            PricePerHour = 8500.0,
                            Rate = 4.0,
                            WebSite = "https://pyramisaislandaswan.com-egypt.com/"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Nile Corniche, Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/1DsSQWkGjK/",
                            ImageUrl = "Hotels/Aswan/13.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3641.77197299069!2d32.903635685011736!3d24.10951318441347!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14367bce05036ea5%3A0x32b15d88103d4d62!2z2YHZhtiv2YIg2KrZiNmE2YrYqCDYo9iz2YjYp9mG!5e0!3m2!1sar!2seg!4v1742150830310!5m2!1sar!2seg",
                            LocationName = "Aswan",
                            Name = "Tolip Aswan Hotel",
                            PhoneNumber = "097 2328828",
                            PricePerHour = 13000.0,
                            Rate = 4.7999999999999998,
                            WebSite = "https://tolipgroup.com/tolip-hotel-aswan/"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Elephantine Island, 31911571 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/19E12Rf3cU/",
                            ImageUrl = "Hotels/Aswan/14.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3642.3922497122853!2d32.887177!3d24.0876976!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1436656da11f668b%3A0xa6dc874bd9b0e6d1!2sLabib%20Guest%20House!5e0!3m2!1sar!2seg!4v1742150891936!5m2!1sar!2seg",
                            LocationName = "Aswan",
                            Name = "Labib Guest House",
                            PhoneNumber = "011 12175285",
                            PricePerHour = 7000.0,
                            Rate = 3.6000000000000001,
                            WebSite = "https://hotel-menara.com/accommodation/aswan/labib-guest-house/360902"
                        },
                        new
                        {
                            Id = 15,
                            Address = "In Front Of The Nubian Museum, 99999 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/14anpY3Nho/",
                            ImageUrl = "Hotels/Aswan/15.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3642.6698326887117!2d32.88940698501253!3d24.077928784428988!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x143664a7e2ac1ee9%3A0x2e0d4f4fbe61ac6b!2z2YHZhtiv2YIg2KjYs9mF2Kk!5e0!3m2!1sar!2seg!4v1742150950289!5m2!1sar!2seg",
                            LocationName = "Aswan",
                            Name = "Basma Hotel Aswan",
                            PhoneNumber = "097 2484001",
                            PricePerHour = 7000.0,
                            Rate = 4.2000000000000002,
                            WebSite = "https://basmahotel.com/contacts/"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Lake Karoun, 99999 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/share/19bAuXS1ex/",
                            ImageUrl = "Hotels/Fayoum/16.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3473.627808130699!2d30.77279458489834!3d29.46887678209527!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145971cb8aa9c4bf%3A0x776fe8b3a4a83286!2z2YHZhtiv2YIg2YfZhNmG2KfZhiDYp9mI2KjYsdis!5e0!3m2!1sar!2seg!4v1742151019663!5m2!1sar!2seg",
                            LocationName = "Fayoum",
                            Name = "Helnan Auberge Fayoum",
                            PhoneNumber = "084 2981200",
                            PricePerHour = 10000.0,
                            Rate = 4.5,
                            WebSite = "https://www.helnan.com/en/Hotel/helnan-auberge-fayoum/?hid=a15a6247-ca00-4bba-86d6-854019538c8c&id="
                        },
                        new
                        {
                            Id = 17,
                            Address = "Tunes village, 29000 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/share/1H3xPZVxez/",
                            ImageUrl = "Hotels/Fayoum/17.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3476.1559037614206!2d30.497292!3d29.394995!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14595d834998b67f%3A0x8d0cf56618018ef7!2sTzila%20Lodge!5e0!3m2!1sar!2seg!4v1742151080175!5m2!1sar!2seg",
                            LocationName = "Fayoum",
                            Name = "Tzila Lodge",
                            PhoneNumber = "010 05383653",
                            PricePerHour = 7000.0,
                            Rate = 3.8999999999999999,
                            WebSite = "https://tzila.com/"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Wadi El Rayyan Road, 63511 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/tache.fayoumm/",
                            ImageUrl = "Hotels/Fayoum/18.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3482.2513170867737!2d30.4119641!3d29.2161614!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145be5f7ca19df45%3A0x80179c95b9ea3575!2sTache%20By%20The%20Lake!5e0!3m2!1sar!2seg!4v1742151145847!5m2!1sar!2seg",
                            LocationName = "Fayoum",
                            Name = "Tache By The Lake",
                            PhoneNumber = "010 03535100",
                            PricePerHour = 6000.0,
                            Rate = 4.0999999999999996,
                            WebSite = "https://www.instagram.com/tache.fayoum/?hl=ar"
                        },
                        new
                        {
                            Id = 19,
                            Address = "Tunis Village, 63626 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/tunisvillageOfficiel/?locale=hi_IN",
                            ImageUrl = "Hotels/Fayoum/19.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d445094.4781190967!2d30.935844!3d29.3614861!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14595f21b4334797%3A0x42b38d8f31f80b1a!2zVHVuaXMgdmlsbGFnZSBFbC1GYXlvdW0gLyDZgtix2YrYqSDYqtmI2YbYsyDYp9mE2YHZitmI2YU!5e0!3m2!1sar!2seg!4v1742151200247!5m2!1sar!2seg",
                            LocationName = "Fayoum",
                            Name = "Tunis Village Chalet",
                            PhoneNumber = "01080537444",
                            PricePerHour = 4000.0,
                            Rate = 3.3999999999999999,
                            WebSite = "https://en.tunisvillage-eg.com/contact"
                        },
                        new
                        {
                            Id = 20,
                            Address = "23 KM Port Said – Damyetta Road, El diba, Egypt, 10000 Port Said, Egypt",
                            Facebook = "https://www.facebook.com/PortoSaidResortOfficial/",
                            ImageUrl = "Hotels/Port Said/20.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d218059.8917912947!2d32.2154536!3d31.3538514!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f993a5744cdaef%3A0x384f1815df6d7eeb!2sPorto%20Said%20Resort%20%26%20Spa!5e0!3m2!1sar!2seg!4v1742151276874!5m2!1sar!2seg",
                            LocationName = "Port Said",
                            Name = "Porto Said Resort & Spa",
                            PhoneNumber = "01278641045",
                            PricePerHour = 2000.0,
                            Rate = 3.2000000000000002,
                            WebSite = "https://www.portohotelseg.com/said-resort/contact"
                        },
                        new
                        {
                            Id = 21,
                            Address = "Sultan Hussein St, Port Said, Egypt",
                            Facebook = "https://www.facebook.com/restaportsaid/?locale=ar_AR",
                            ImageUrl = "Hotels/Port Said/21.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3410.2431514337036!2d32.317764784855505!3d31.269368781453288!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f99dd29f66fd7f%3A0x3a573da6a39b5c09!2z2YHZhtiv2YIg2LHYs9iq2Kcg2KjZiNix2LPYudmK2K8gUmVzdGEgUG9ydCBTYWlkIEhvdGVs!5e0!3m2!1sar!2seg!4v1742151328591!5m2!1sar!2seg",
                            LocationName = "Port Said",
                            Name = "Resta Port Said Hotel",
                            PhoneNumber = "066 3200511",
                            PricePerHour = 6000.0,
                            Rate = 4.2999999999999998,
                            WebSite = "https://www.booking.com/hotel/eg/resta-port-said.ar.html"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Port Said, Atef El-Sadat Street Madînet, Portsaid, Port Said Governorate 42511, 42511 Port Said, Egypt",
                            Facebook = "https://www.facebook.com/GrandHotel.eg/",
                            ImageUrl = "Hotels/Port Said/22.jpg",
                            Location = "https://maps.app.goo.gl/7hRWvSLypY1vF6gQ7",
                            LocationName = "Port Said",
                            Name = "Grand Hotel Port Said",
                            PhoneNumber = "066 3267550",
                            PricePerHour = 3500.0,
                            Rate = 3.7999999999999998,
                            WebSite = "https://www.instagram.com/grandhotelportsaid/"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Al Zaim Ghandi St Atef El Sadat St",
                            Facebook = "https://www.facebook.com/maromportsaid/",
                            ImageUrl = "Hotels/Port Said/23.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3410.1397178613893!2d32.30846088485543!3d31.272230281452348!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f99df8e01a8d4d%3A0x7157294320b9c03!2sMarom%20Port%20Said%20Resort%20%26%20Beach!5e0!3m2!1sar!2seg!4v1742151398360!5m2!1sar!2seg",
                            LocationName = "Port Said",
                            Name = "Marom Port Said Resort & Beach",
                            PhoneNumber = "012 22111321",
                            PricePerHour = 3100.0,
                            Rate = 4.0,
                            WebSite = "https://maromhotels.com/ar/"
                        },
                        new
                        {
                            Id = 24,
                            Address = "Atef El Sadat Street, Port Fouad",
                            Facebook = "https://m.facebook.com/profile.php?id=117377931674556",
                            ImageUrl = "Hotels/Port Said/24.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3410.1844026944764!2d32.3148307!3d31.2709941!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f99d03c6fd5229%3A0x8fbb517578e263eb!2sHelnan%20portsaid%20beach!5e0!3m2!1sar!2seg!4v1742151582485!5m2!1sar!2seg",
                            LocationName = "Port Said",
                            Name = "Helnan Port Said",
                            PhoneNumber = "0663456669",
                            PricePerHour = 2500.0,
                            Rate = 3.5,
                            WebSite = "https://www.helnan.com/fr/RoomDetails/helnan-port-said-hotel/?id=d64d57b3-0524-41ca-8411-2a8cb5333d80&hid=711bd3e2-7d02-49e4-8606-1e85d0aca2c9"
                        },
                        new
                        {
                            Id = 25,
                            Address = "16, Mohamed aly street De Lesseps, ismailia, Egypt, 8361240 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/maisonmaximdelesseps/",
                            ImageUrl = "Hotels/Ismailia/25.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3434.578365545696!2d32.27466188487197!3d30.589445881687254!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f859166dbcf2e1%3A0x1211a0cd16b1cc3c!2sMaison%20Maxim%20De%20Lesseps!5e0!3m2!1sar!2seg!4v1742151661482!5m2!1sar!2seg",
                            LocationName = "Ismailia",
                            Name = "Maison Maxim De Lesseps",
                            PhoneNumber = "010 94888121",
                            PricePerHour = 5500.0,
                            Rate = 4.0999999999999996,
                            WebSite = "https://maisonmaximdelesseps.com/?lang=ar"
                        },
                        new
                        {
                            Id = 26,
                            Address = "El-Shaheed Abd El-Moneim Riad Road, 41515 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/TOLIPELFORSAN/",
                            ImageUrl = "/Hotels/Ismailia/26.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3434.680587815631!2d32.294907684872044!3d30.586561081688355!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f85939ef30b857%3A0xcc821483be9fa145!2z2YHZhtiv2YIg2KrZiNmE2YrYqCDYp9mE2YHYsdiz2KfZhg!5e0!3m2!1sar!2seg!4v1742152106565!5m2!1sar!2seg",
                            LocationName = "Ismailia",
                            Name = "Tolip El Forsan Hotel",
                            PhoneNumber = "01060779118",
                            PricePerHour = 5600.0,
                            Rate = 4.4000000000000004,
                            WebSite = "https://tolipgroup.com/tolip-resort-el-forsan-ismailia/"
                        },
                        new
                        {
                            Id = 27,
                            Address = "Nemra 6, 41622 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/GOLJEWISM/?locale=ar_AR",
                            ImageUrl = "Hotels/Ismailia/27.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3434.6260618508227!2d32.30557968487199!3d30.588099881687803!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f859c1eb07d465%3A0x8a120d14d66b22fb!2z2KzZiNmE2K_ZhiDYrNmI2YrZhCDYp9mE2KPYs9mF2KfYudmK2YTZitip!5e0!3m2!1sar!2seg!4v1742152181691!5m2!1sar!2seg",
                            LocationName = "Ismailia",
                            Name = "Golden Jewel Ismailia Resort",
                            PhoneNumber = "011 52287777",
                            PricePerHour = 3900.0,
                            Rate = 3.7000000000000002,
                            WebSite = "https://jewelhotels.net/hotel/golden-jewel-ismailia"
                        },
                        new
                        {
                            Id = 28,
                            Address = "Forsan Island, 41511 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/MercureIsmailia/",
                            ImageUrl = "Hotels/Ismailia/28.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3434.7143616907956!2d32.2898186!3d30.5856079!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f8594808a17409%3A0xa0b58f85a1cbfb6f!2z2YHZhtiv2YIg2YXZitix2YPZitmI2LEg2KzYstmK2LHYqSDYp9mE2YHYsdiz2KfZhiDYp9mE2KXYs9mF2KfYudmK2YTZitip!5e0!3m2!1sar!2seg!4v1742152275470!5m2!1sar!2seg",
                            LocationName = "Ismailia",
                            Name = "Mercure Ismailia Forsan Island",
                            PhoneNumber = "01227011086",
                            PricePerHour = 4700.0,
                            Rate = 4.2000000000000002,
                            WebSite = "https://www.instagram.com/mercure_ismailia_forsan_island/?hl=ar"
                        },
                        new
                        {
                            Id = 29,
                            Address = "Ismailia Cooperation Area, 11111 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/100057534216384/videos/villa-ali-ali-villas-tobago-plantations-estate/1142269550326102/",
                            ImageUrl = "Hotels/Ismailia/29.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3550.157939690344!2d33.82256158494995!3d27.151320483025412!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1452814d419b4bbb%3A0x2c3f366343fc38b6!2zQWxp4oCZcyBWaWxsYQ!5e0!3m2!1sar!2seg!4v1742152338797!5m2!1sar!2seg",
                            LocationName = "Ismailia",
                            Name = "VIP villa Ali",
                            PhoneNumber = "0792807762",
                            PricePerHour = 2600.0,
                            Rate = 3.2999999999999998,
                            WebSite = "https://www.instagram.com/explore/locations/1762370497115752/vip-villa/"
                        },
                        new
                        {
                            Id = 30,
                            Address = "El Galaa Street, behind Omar Effendi, Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/Adriaticahotel.marsamatruh/",
                            ImageUrl = "Hotels/Marsa Matrouh/30.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3407.192693464274!2d27.234511!3d31.3536614!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1461fed2b13ff665%3A0x9ad16be5291440b2!2z2YHZhtiv2YIg2KfYr9ix2YrYqtmK2YPYpw!5e0!3m2!1sar!2seg!4v1742152471152!5m2!1sar!2seg",
                            LocationName = "Marsa Matrouh",
                            Name = "Adriatica Hotel Marsa Matrouh",
                            PhoneNumber = "046 4938696",
                            PricePerHour = 1570.0,
                            Rate = 3.1000000000000001,
                            WebSite = "https://www.instagram.com/explore/locations/948309694/adriatica-hotel-marsa-matruh/"
                        },
                        new
                        {
                            Id = 31,
                            Address = "Ras El hekma North Coast, Marsa Matruh, 51512 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/MarmaricaBoutiqueCabanas/",
                            ImageUrl = "Hotels/Marsa Matrouh/31.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3416.6300059684254!2d27.9300305!3d31.0922173!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14603302ded12bc9%3A0xa167edb8d434215c!2sMarmarica%20Boutique%20Cabanas!5e0!3m2!1sar!2seg!4v1742152936163!5m2!1sar!2seg",
                            LocationName = "Marsa Matrouh",
                            Name = "Marmarica Boutique Cabanas - Ras El Hekma - North Coast",
                            PhoneNumber = "011 00101919",
                            PricePerHour = 30500.0,
                            Rate = 4.9000000000000004,
                            WebSite = "https://marmarica.com/"
                        },
                        new
                        {
                            Id = 32,
                            Address = "P.O Box 51511 - Marsa Matrouh, 51511 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/SafirMarsaMatrouhResort/",
                            ImageUrl = "Hotels/Marsa Matrouh/32.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3406.531937882072!2d27.2005518!3d31.371893099999998!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1461ffb92025d769%3A0x676bfa79fb218aab!2sSafir%20Marsa%20Matrouh%20Resort!5e0!3m2!1sar!2seg!4v1742152993016!5m2!1sar!2seg",
                            LocationName = "Marsa Matrouh",
                            Name = "Safir Marsa Matrouh Resort",
                            PhoneNumber = "012 72409648",
                            PricePerHour = 2300.0,
                            Rate = 3.7999999999999998,
                            WebSite = "https://www.safirhotels.com/en/press/New-Opening-Safir-Marsa-Matrouh"
                        },
                        new
                        {
                            Id = 33,
                            Address = "120 Alexandria - Marsa Matrouh Road Beside Elhamraa Port, 51718 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/p/Tolip-Resort-Paradise-New-Alamien-100092546733324/",
                            ImageUrl = "Hotels/Marsa Matrouh/33.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3422.778585805699!2d28.8349375!3d30.9208125!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145ffbea0200d795%3A0x22f69e1fe2d16a70!2sTOLIP%20Resort%20Paradise%20New%20Alamein!5e0!3m2!1sar!2seg!4v1742153064059!5m2!1sar!2seg",
                            LocationName = "Marsa Matrouh",
                            Name = "Tolip Resort Paradise",
                            PhoneNumber = "+20 100 981 5908",
                            PricePerHour = 7500.0,
                            Rate = 4.2999999999999998,
                            WebSite = "https://tolipgroup.com/tolip-resort-paradise-new-alamein/contact-us/"
                        },
                        new
                        {
                            Id = 34,
                            Address = "Almaza Bay, 37 km East Mersa Matruh, Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/jazalmazabayresorts/",
                            ImageUrl = "Hotels/Marsa Matrouh/34.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3412.8144910534843!2d27.5546091!3d31.1981566!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1461dd53f1555555%3A0x50a0b1cb77aa4b0d!2sJAZ%20Almaza%20Beach%20Resort%2C%20Almaza%20Bay!5e0!3m2!1sar!2seg!4v1742153124653!5m2!1sar!2seg",
                            LocationName = "Marsa Matrouh",
                            Name = "JAZ Almaza Beach Resort, Almaza Bay",
                            PhoneNumber = "010 66699942",
                            PricePerHour = 3400.0,
                            Rate = 4.0,
                            WebSite = "https://www.jazhotels.com/hoteldetail/30-egypt-almaza-bay-jaz-almaza-beach-resort"
                        },
                        new
                        {
                            Id = 35,
                            Address = "0 km Safaga El Queseir Road Hurghada, 84711, Égypte, 84711 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/tuimagiclifekalawy/",
                            ImageUrl = "Hotels/Hurghada/35.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3570.273973829099!2d34.0675947!3d26.5113117!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x144d198b1395a3a5%3A0x8fafdb50b5c09625!2sTUI%20MAGIC%20LIFE%20Kalawy!5e0!3m2!1sar!2seg!4v1742153171217!5m2!1sar!2seg",
                            LocationName = "Hurghada",
                            Name = "TUI MAGIC LIFE Kalawy",
                            PhoneNumber = "065 3200021",
                            PricePerHour = 10000.0,
                            Rate = 4.5999999999999996,
                            WebSite = "https://tuimagiclifekalawy.com-hurghada.com/"
                        },
                        new
                        {
                            Id = 36,
                            Address = "Sahl Hashish Road, 84521 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/SahlHasheesh.de/videos/flow-spectrum-resort-sahl-hasheesh/9498118343552521/",
                            ImageUrl = "Hotels/Hurghada/36.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3553.7322551538464!2d33.8794394!3d27.0386252!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x144d7f004762bf8b%3A0x1fc9280a55997817!2sFlow%20Spectrum%20Resort!5e0!3m2!1sar!2seg!4v1742153208474!5m2!1sar!2seg",
                            LocationName = "Hurghada",
                            Name = "Flow Spectrum Resort Sahl Hasheesh",
                            PhoneNumber = "012 78575677",
                            PricePerHour = 4400.0,
                            Rate = 3.8999999999999999,
                            WebSite = "https://resortflowspectrumhasheesh.hotelshurghada.com/en/"
                        },
                        new
                        {
                            Id = 37,
                            Address = "El Helal District, 84511 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Al-Dora-Residence-100067650841951/",
                            ImageUrl = "Hotels/Hurghada/37.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3546.5372517674928!2d33.802178!3d27.2650389!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145287fdda77e4cb%3A0x2b619ec9710e07f4!2sAl%20Dora%20Residence!5e0!3m2!1sar!2seg!4v1742153239509!5m2!1sar!2seg",
                            LocationName = "Hurghada",
                            Name = "Al Dora Resort All Inclusive Hotel",
                            PhoneNumber = "011 11167642",
                            PricePerHour = 3900.0,
                            Rate = 3.7000000000000002,
                            WebSite = "https://resortaldorainclusive.hotelshurghada.com/en/"
                        },
                        new
                        {
                            Id = 38,
                            Address = "El Helal District, Hurghada 2, Red Sea Governorate, 84511 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Davinciresort-100067030293671/",
                            ImageUrl = "Hotels/Hurghada/38.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d14187.060345489059!2d33.8203617!3d27.257896!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145287e44b1a58cf%3A0x566333cc5ba3f395!2sNew%20DaVinci%20Beach%20%26%20Diving%20Resort!5e0!3m2!1sar!2seg!4v1742153281585!5m2!1sar!2seg",
                            LocationName = "Hurghada",
                            Name = "Davinci Beach Resort",
                            PhoneNumber = "653557868",
                            PricePerHour = 1800.0,
                            Rate = 3.3999999999999999,
                            WebSite = "https://da-vinci-beach.hotel-hurghada.com/en/"
                        },
                        new
                        {
                            Id = 39,
                            Address = "El-Bahr, 1973706 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Geisum-Village-Hurghada-100069093702673/",
                            ImageUrl = "Hotels/Hurghada/39.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3546.688336422805!2d33.8214024!3d27.2603024!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145287d92d6287f7%3A0x4abce40efc57c7a!2zTmV3IEdlaXN1bSDZhtmK2Ygg2KzZitiy2YjZhQ!5e0!3m2!1sar!2seg!4v1742153316715!5m2!1sar!2seg",
                            LocationName = "Hurghada",
                            Name = "New Gaisum Resort",
                            PhoneNumber = "065 3546692",
                            PricePerHour = 2300.0,
                            Rate = 3.6000000000000001,
                            WebSite = "https://el-geisum-village.hotel-hurghada.com/en/"
                        },
                        new
                        {
                            Id = 40,
                            Address = "Moustafa Kamel, Corniche Road Roshdy, Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/14q1Rp793o/",
                            ImageUrl = "Hotels/Alexandria/40.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d852.9016871781419!2d29.9440803!3d31.2316227!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f5c4e610b4e28d%3A0x55e0e76c064a00be!2sTOLIP%20Hotel%20Alexandria!5e0!3m2!1sar!2seg!4v1742153353585!5m2!1sar!2seg",
                            LocationName = "Alexandria",
                            Name = "Tolip",
                            PhoneNumber = "035419330",
                            PricePerHour = 5000.0,
                            Rate = 4.2000000000000002,
                            WebSite = "https://tolipgroup.com/tolip-hotel-royal-alexandria/"
                        },
                        new
                        {
                            Id = 41,
                            Address = "Corniche Road Sidi Gaber Alexandria Corniche Road Sidi Gaber Alexandria, 21523 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/1YgyBKhYXQ/",
                            ImageUrl = "Hotels/Alexandria/41.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3411.694075064414!2d29.941944999999993!3d31.229204!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f5c594317c499d%3A0xd8de85f6cd600a22!2sGolden%20Jewel%20Beach%20%26%20Hotel!5e0!3m2!1sar!2seg!4v1742153399218!5m2!1sar!2seg",
                            LocationName = "Alexandria",
                            Name = "Golden Jewel Beach&Hotel",
                            PhoneNumber = "035442380",
                            PricePerHour = 3400.0,
                            Rate = 3.8999999999999999,
                            WebSite = "https://www.jewelhotels.net/hotel/golden-jewel-hotel-alexandria"
                        },
                        new
                        {
                            Id = 42,
                            Address = "14th May Avenue, Smouha, 21648 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/1ARavY4jGT/",
                            ImageUrl = "Hotels/Alexandria/42.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3412.428921417258!2d29.9603911!3d31.2088441!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f5c4976eb3c991%3A0x82c3d973fe60b252!2z2YHZhtiv2YIg2KzYsdin2YbYryDYqNmE2KfYstinINiz2YXZiNit2Kk!5e0!3m2!1sar!2seg!4v1742153437367!5m2!1sar!2seg",
                            LocationName = "Alexandria",
                            Name = "The Grand Plaza Hotel Smouha",
                            PhoneNumber = "033786100",
                            PricePerHour = 2900.0,
                            Rate = 3.5,
                            WebSite = "https://www.tgphotels.com/"
                        },
                        new
                        {
                            Id = 43,
                            Address = "1 Digla Street, Al Ramel Station, Corniche Road, 00203 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/15EyLh2pvi/",
                            ImageUrl = "Hotels/Alexandria/43.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3412.662304893747!2d29.9014263!3d31.2023754!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f5db2eca0d7955%3A0x30a0eecda7d20f56!2z2YHZhtiv2YIg2YHYpNin2K8!5e0!3m2!1sar!2seg!4v1742153471487!5m2!1sar!2seg",
                            LocationName = "Alexandria",
                            Name = "Fouad Hotel",
                            PhoneNumber = "034808308",
                            PricePerHour = 1100.0,
                            Rate = 3.0,
                            WebSite = "https://x.com/FouadResv?fbclid=IwZXh0bgNhZW0CMTEAAR1Kn6p5zx9-H-Ej1e6ggmCT87Yqq5iLaDlZQkii6EnYby1drETYgM33xeg_aem_Jv3QsJFIdeOw0K3uZ1Zrqw"
                        },
                        new
                        {
                            Id = 44,
                            Address = "Al Montazah Palace, 99999 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/15Q5PCjSzD/",
                            ImageUrl = "Hotels/Alexandria/44.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3409.5521515111423!2d30.0183078!3d31.2884809!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f5d061fc11582d%3A0x12657103d509ea6c!2z2YHZhtiv2YIg2YfZhNmG2KfZhiDYsdmI2YrYp9mE!5e0!3m2!1sar!2seg!4v1742153525150!5m2!1sar!2seg",
                            LocationName = "Alexandria",
                            Name = "Helnan",
                            PhoneNumber = "01001710737",
                            PricePerHour = 4000.0,
                            Rate = 4.4000000000000004,
                            WebSite = "https://www.helnan.com/en/Hotel/helnan-royal-alexandria/?hid=4e692ca5-519f-492f-9a2a-4079789b5877&id="
                        },
                        new
                        {
                            Id = 45,
                            Address = "LUSINDA HOTEL MANAGEMENT BY ZAD, Suez, Egypt",
                            Facebook = "https://www.facebook.com/lusinda.resort/",
                            ImageUrl = "Hotels/Suez/45.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3456.842921639098!2d32.5404515!3d29.9551965!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145625d589fe6b35%3A0x65f93388bc88c3fc!2sLUSINDA%20HOTEL!5e0!3m2!1sar!2seg!4v1742153558885!5m2!1sar!2seg",
                            LocationName = "Suez",
                            Name = "LUSINDA",
                            PhoneNumber = "01201680000",
                            PricePerHour = 3700.0,
                            Rate = 3.7999999999999998,
                            WebSite = "https://www.instagram.com/lusinda.resort/"
                        },
                        new
                        {
                            Id = 46,
                            Address = "25 KM After Ahmed Hamdy Tunnel, Ras Sedr, Egypt",
                            Facebook = "https://www.facebook.com/mousacoast.egy/",
                            ImageUrl = "Hotels/Suez/46.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3460.141684109636!2d32.6574876!3d29.8601875!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14563cf73f05475b%3A0xb3ea0e7664279635!2sMousa%20coast!5e0!3m2!1sar!2seg!4v1742153590564!5m2!1sar!2seg",
                            LocationName = "Suez",
                            Name = "Mousa Coast Hotel",
                            PhoneNumber = "+20226775732",
                            PricePerHour = 1800.0,
                            Rate = 3.5,
                            WebSite = "https://mousacoasthotel.com-egypt.com/"
                        },
                        new
                        {
                            Id = 47,
                            Address = "2 Sharie Bursaeid, Suez 43522 Egypt",
                            Facebook = "https://www.facebook.com/hotel.greenhouse/",
                            ImageUrl = "Hotels/Suez/47.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d13826.602232954514!2d32.5425553!3d29.9607284!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1456250ca617e177%3A0x6daa7f828299e94f!2z2YHZhtiv2YIg2KzYsdmK2YYg2YfYp9mI2LM!5e0!3m2!1sar!2seg!4v1742153628730!5m2!1sar!2seg",
                            LocationName = "Suez",
                            Name = "Green House",
                            PhoneNumber = "0623191554",
                            PricePerHour = 1000.0,
                            Rate = 3.2000000000000002,
                            WebSite = "https://greenhouse.com-egypt.com/"
                        },
                        new
                        {
                            Id = 48,
                            Address = "Sharks Bay, 99999 Sharm El Sheikh, Egypt",
                            Facebook = "https://www.instagram.com/vhotelsharmelsheikh/",
                            ImageUrl = "Hotels/Sharm El Sheikh/48.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3524.4965767296762!2d34.3792281!3d27.9480745!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145349c9cc60221b%3A0xb4b82bc015ac6a56!2sV%20Hotel%20Sharm%20El%20Sheikh!5e0!3m2!1sar!2seg!4v1742153665106!5m2!1sar!2seg",
                            LocationName = "Sharm El-Sheikh",
                            Name = "V Hotel",
                            PhoneNumber = "0693601091",
                            PricePerHour = 7300.0,
                            Rate = 4.2999999999999998,
                            WebSite = "https://thevhotelsegypt.com/v-sharm-el-sheikh/"
                        },
                        new
                        {
                            Id = 50,
                            Address = "Nabq Bay, 11038 Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/albatroslagunavistaresort/",
                            ImageUrl = "Hotels/Sharm El Sheikh/50.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3521.4126062109817!2d34.4287806!3d28.0424237!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14533bca1528a70f%3A0xc0a3d3a55c1b5fe9!2sPickalbatros%20Laguna%20Vista%20Hotel%20-%20Sharm%20El%20Sheikh!5e0!3m2!1sar!2seg!4v1742153730808!5m2!1sar!2seg",
                            LocationName = "Sharm El-Sheikh",
                            Name = "Pickalbatros Laguna Vista",
                            PhoneNumber = "+20693710121",
                            PricePerHour = 8600.0,
                            Rate = 4.7000000000000002,
                            WebSite = "https://www.pickalbatros.com/laguna-vista-hotel-sharm-el-sheikh"
                        },
                        new
                        {
                            Id = 49,
                            Address = "Naama Bay, Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/NovotelSharmElSheikh/",
                            ImageUrl = "Hotels/Sharm El Sheikh/49.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3525.5565569460086!2d34.3286542!3d27.9155784!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14533787f83288e7%3A0x12499f16f664fbae!2z2YHZhtiv2YIg2YbZiNmB2YjYqtmK2YQg2LTYsdmFINin2YTYtNmK2K4!5e0!3m2!1sar!2seg!4v1742153698720!5m2!1sar!2seg",
                            LocationName = "Sharm El-Sheikh",
                            Name = "Novotel",
                            PhoneNumber = "0693600172",
                            PricePerHour = 4400.0,
                            Rate = 4.0,
                            WebSite = "https://all.accor.com/hotel/1715/index.en.shtml"
                        },
                        new
                        {
                            Id = 51,
                            Address = "Om El Seid Cliff, Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/AmphorasHotels/",
                            ImageUrl = "Hotels/Sharm El Sheikh/51.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3527.0801943707547!2d34.3172883!3d27.8688068!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x145339f7ec25e6d1%3A0x77f8cfef69e38cc9!2z2YXZhtiq2KzYuSDYtNmI2LHYsiDYo9mF2YHZiNix2KfYsyDYqNmK2KrYtA!5e0!3m2!1sar!2seg!4v1742153763552!5m2!1sar!2seg",
                            LocationName = "Sharm El-Sheikh",
                            Name = "Amphoras",
                            PhoneNumber = "01223932782",
                            PricePerHour = 6400.0,
                            Rate = 4.0999999999999996,
                            WebSite = "https://www.amphorashotels.com/amphoras?gad_source=1&gclid=Cj0KCQjwytS-BhCKARIsAMGJyzoXN18tpgCfWuylL776fMQhxIDgxj67v9CRnxk-ZhgA79I5d1RLOmcaAiZREALw_wcB"
                        },
                        new
                        {
                            Id = 52,
                            Address = "Naama Bay, 6019 Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/movenpicksharmelsheikh/",
                            ImageUrl = "Hotels/Sharm El Sheikh/52.jpg",
                            Location = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3525.6106056334993!2d34.34263598493347!3d27.9139204827069!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14533bb92492a9af%3A0x9b7fa058a25aeac8!2sM%C3%B6venpick%20Sharm%20El%20Sheikh!5e0!3m2!1sar!2seg!4v1742153794348!5m2!1sar!2seg",
                            LocationName = "Sharm El-Sheikh",
                            Name = "Movenpick",
                            PhoneNumber = "+20693600081",
                            PricePerHour = 5700.0,
                            Rate = 4.5,
                            WebSite = "https://movenpick.accor.com/en/africa/egypt/sharm-el-sheikh/resort-sharm-el-sheikh.html"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c8298a9-982f-4d9d-a632-55f7d148f735",
                            Email = "admin@egyptos.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NationalId = "12345678901234",
                            NormalizedEmail = "ADMIN@EGYPTOS.COM",
                            NormalizedUserName = "ADMIN@EGYPTOS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f3a18b3-c453-4a3a-b2e3-57f2e0429f50",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "admin@egyptos.com"
                        },
                        new
                        {
                            Id = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3c8f4ef-c9ab-49b5-9b16-06f17aa7668a",
                            Email = "Ahmed12@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmed",
                            ImageUrl = "profiles/df4fb389-64ed-486e-be7d-722771b6e3bc.jpeg",
                            LastName = "Momamed",
                            LockoutEnabled = false,
                            NationalId = "30305521354688",
                            NormalizedEmail = "AHMED12@GMAIL.COM",
                            NormalizedUserName = "AHMED12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01024866094",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46e17415-53e4-4e26-8ce4-3b9f91a4ebcd",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ahmed12@gmail.com"
                        },
                        new
                        {
                            Id = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e09e586-695e-44ad-86a9-f7b49ba3552b",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            ImageUrl = "profiles/Outdoor Portraits — San Francisco Bay Area's Premier Personal Brand and Headshot Photographer _ Alpa.jpeg",
                            LastName = "Salama",
                            LockoutEnabled = false,
                            NationalId = "30308795612367",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01134409876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "287317a5-2b4e-4193-ade4-9b03c843b021",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ali@gmail.com"
                        },
                        new
                        {
                            Id = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a61c81ae-cdb2-4c92-ae17-75247a4cb5cb",
                            Email = "Hassan44@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hassan",
                            ImageUrl = "profiles/Friendly Professional Business Headshot.jpeg",
                            LastName = "Alaa",
                            LockoutEnabled = false,
                            NationalId = "30306729061246",
                            NormalizedEmail = "HASSAN4412@GMAIL.COM",
                            NormalizedUserName = "HASSAN4412@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01079945073",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33fe0c4e-09d7-4b8b-a625-7cf0651fb90e",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Hassan44@gmail.com"
                        },
                        new
                        {
                            Id = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d973bd-092f-4869-ac70-0b1004519b48",
                            Email = "Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            ImageUrl = "profiles/82ebaf90-31fe-40ef-8358-99823ce3881d.jpeg",
                            LastName = "Mady",
                            LockoutEnabled = false,
                            NationalId = "30309871265308",
                            NormalizedEmail = "MOHAMED@GMAIL.COM",
                            NormalizedUserName = "MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01084670325",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a5413d0-0b02-48f8-a24f-16b929d0af74",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Mohamed@gmail.com"
                        },
                        new
                        {
                            Id = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a0bc059-4d5d-45dc-98dc-5e557d7aa1c1",
                            Email = "Maher@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maher",
                            ImageUrl = "profiles/Rajan Velu.jpeg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "30301937508274",
                            NormalizedEmail = "MAHER@GMAIL.COM",
                            NormalizedUserName = "MAHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01208173649",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04a9f78c-43b0-4a6f-bb40-c161adb30b23",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Maher@gmail.com"
                        },
                        new
                        {
                            Id = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d48db4f-16d7-418b-b97f-dbfe8616af56",
                            Email = "Nader@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nader",
                            ImageUrl = "profiles/Mari Juliano.jpeg",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NationalId = "303020837616543",
                            NormalizedEmail = "NADER@GMAIL.COM",
                            NormalizedUserName = "NADER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01147893547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e68c1657-3cb1-4097-a45f-27c1a655c81f",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Nader@gmail.com"
                        },
                        new
                        {
                            Id = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7ed49bc-72fb-42be-afc5-fbd0351bd759",
                            Email = "Khaled@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Khaled",
                            ImageUrl = "profiles/MEN - Location - Headshot Photography by Brandon Tabiolo.jpeg",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NationalId = "30301920482846",
                            NormalizedEmail = "KHALED@GMAIL.COM",
                            NormalizedUserName = "KHALED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01293749183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f85433e6-bf5b-4ffc-9d02-3a7cc9938547",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Khaled@gmail.com"
                        },
                        new
                        {
                            Id = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9773109-8364-4c61-a5d4-9fe85a58c0f4",
                            Email = "Kareem@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kareem",
                            ImageUrl = "profiles/Why I Mainly Photograph in Portrait Orientation for Actors' Headshots.jpeg",
                            LastName = "Maged",
                            LockoutEnabled = false,
                            NationalId = "303092689146845",
                            NormalizedEmail = "KAREEM@GMAIL.COM",
                            NormalizedUserName = "KAREEM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01024860821",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aed0822d-8180-49b3-85cc-a4f5a33a3b56",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Kareem@gmail.com"
                        },
                        new
                        {
                            Id = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43d7bf34-bc3a-4d7f-841e-f1dfd028303d",
                            Email = "Halem@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Halem",
                            ImageUrl = "profiles/Gorgeous smile of Alexis Petit.jpeg",
                            LastName = "Ebrahim",
                            LockoutEnabled = false,
                            NationalId = "30308391092836",
                            NormalizedEmail = "HALEM@GMAIL.COM",
                            NormalizedUserName = "HALEM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01049182640",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "999faa1d-9041-4c56-888c-42b8286d68b7",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Halem@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c76ae4f3-37a2-4707-b71b-f5d99f6f50da",
                            Email = "Salma@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Salma",
                            ImageUrl = "profiles/Women in Business.jpeg",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NationalId = "30302901738376",
                            NormalizedEmail = "SALMA@GMAIL.COM",
                            NormalizedUserName = "SALMA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01029836539",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2121aa48-49d8-4b1e-841e-48a7e61b0863",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Salma@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f58fbbd5-a0d4-460c-bc0d-5afb9a0adb63",
                            Email = "Jesseyd@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kosta",
                            ImageUrl = "profiles/9151a7a4-4fc2-4bb0-a427-f97f4127e661.jpeg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "40415678901625",
                            NormalizedEmail = "JESSEYD@GMAIL.COM",
                            NormalizedUserName = "JESSEYD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "07022670816",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4dd9dcd-8ef8-40fa-b1ac-6a6caa133079",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Jesseyd@gmail.com"
                        },
                        new
                        {
                            Id = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edb44c87-00c3-488a-9b74-2fc632b48bfc",
                            Email = "Marry@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            ImageUrl = "profiles/468f9794-778b-429f-bea8-b7440810819d.jpeg",
                            LastName = "John",
                            LockoutEnabled = false,
                            NationalId = "40423109753269",
                            NormalizedEmail = "MARRY@GMAIL.COM",
                            NormalizedUserName = "MARRY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "02029837399",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e27dc6f7-4bf0-44a1-a3fb-8b3e5239e87f",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Marry@gmail.com"
                        },
                        new
                        {
                            Id = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c615d822-a4fc-4a3a-8b23-b4b6c155b96a",
                            Email = "Mark@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            ImageUrl = "profiles/44050f40-662d-408b-9dda-9e3271d7c36e.jpeg",
                            LastName = "ALbrto",
                            LockoutEnabled = false,
                            NationalId = "4042098715635491",
                            NormalizedEmail = "MARK@GMAIL.COM",
                            NormalizedUserName = "MARK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "070901468297",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6909260d-6430-4133-868e-9091e01fe56f",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Mark@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f58fbbd5-a0d4-460c-bc0d-5afb9a0adb63",
                            Email = "Jessey@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jessy",
                            ImageUrl = "profiles/9151a7a4-4fc2-4bb0-a427-f97f4127e661.jpeg",
                            LastName = "MArk",
                            LockoutEnabled = false,
                            NationalId = "40415678901625",
                            NormalizedEmail = "JESSEY@GMAIL.COM",
                            NormalizedUserName = "JESSEY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "07022670816",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4dd9dcd-8ef8-40fa-b1ac-6a6caa133079",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Jessey@gmail.com"
                        },
                        new
                        {
                            Id = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4986d9a-0ff6-4ecb-9f51-b8bb5dc826e4",
                            Email = "Rana@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rana",
                            ImageUrl = "profiles/2edc3141-b4cd-411d-9136-33440bbb1c03.jpeg",
                            LastName = "Osama",
                            LockoutEnabled = false,
                            NationalId = "30304597102873",
                            NormalizedEmail = "RANA@GMAIL.COM",
                            NormalizedUserName = "RANA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01028649032",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5e74c9d-fe75-442e-a90e-6400f6a2f0c7",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Rana@gmail.com"
                        },
                        new
                        {
                            Id = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ca42846-c687-48a2-9eb4-77fc5f21ae44",
                            Email = "Ramy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ramy",
                            ImageUrl = "profiles/16 Black Chefs Changing Food in America (Published 2019).jpeg",
                            LastName = "Aziz",
                            LockoutEnabled = false,
                            NationalId = "30303409168364",
                            NormalizedEmail = "RAMY@GMAIL.COM",
                            NormalizedUserName = "RAMY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "011298640281",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f439954d-63d4-4e36-8a5f-827f533cc6a1",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ramy@gmail.com"
                        },
                        new
                        {
                            Id = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d607b523-2920-4ea8-83c4-2103dbb45b0a",
                            Email = "Rola@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rola",
                            ImageUrl = "profiles/Before and After_ Transforming Your LinkedIn Profile with AI Headshots.jpeg",
                            LastName = "Samy",
                            LockoutEnabled = false,
                            NationalId = "30306183028747",
                            NormalizedEmail = "ROLA@GMAIL.COM",
                            NormalizedUserName = "ROLA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "012938475601",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eac93f1e-749b-4c66-9783-c46c16b4ffbf",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Rola@gmail.com"
                        },
                        new
                        {
                            Id = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a46ec364-f74a-455e-93f2-471913135d05",
                            Email = "Malek@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Malek",
                            ImageUrl = "profiles/9c12d50d-5cbe-4c75-8bca-cbc57d504a7b.jpeg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "30308103829384",
                            NormalizedEmail = "MALEK@GMAIL.COM",
                            NormalizedUserName = "MALEK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01283604718",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16dd3214-5abc-48b6-83cd-df00d21f16dc",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Malek@gmail.com"
                        },
                        new
                        {
                            Id = "52511e3a-0690-45b0-9e52-02667a473b18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e184b3aa-6771-4830-83f9-b1a59c9676c4",
                            Email = "Magdy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Magdy",
                            ImageUrl = "profiles/Dallas Headshots Photographer - Willie & Kim Photography.jpeg",
                            LastName = "Abdallah",
                            LockoutEnabled = false,
                            NationalId = "30301789256730",
                            NormalizedEmail = "MAGDY@GMAIL.COM",
                            NormalizedUserName = "MAGDY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01183670178",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda38b97-da47-40ba-bbe3-702a78f4e009",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Magdy@gmail.com"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("PrivateTransports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 4,
                            Description = "Luxury sports sedan with high performance.",
                            ImageUrl = "PrivateTransports/Car/bmw-5.jpg",
                            IsAvailable = true,
                            Name = "Bmw M5",
                            PricePerHour = 50.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            Description = "Premium luxury sedan with advanced features.",
                            ImageUrl = "PrivateTransports/Car/Mercedes-Benz S-Class.jpeg",
                            IsAvailable = true,
                            Name = "Mercedes-Benz S-Class",
                            PricePerHour = 60.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 4,
                            Description = "High-end executive car with superior comfort.",
                            ImageUrl = "PrivateTransports/Car/Audi A8.jpg",
                            IsAvailable = true,
                            Name = "Audi A8",
                            PricePerHour = 55.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 4,
                            Description = "Reliable and comfortable sedan for everyday use.",
                            ImageUrl = "PrivateTransports/Car/Toyota Camry.webp",
                            IsAvailable = true,
                            Name = "Toyota Camry",
                            PricePerHour = 30.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 4,
                            Description = "Affordable compact sedan with great fuel efficiency.",
                            ImageUrl = "PrivateTransports/Car/Nissan Sunny.jpg",
                            IsAvailable = true,
                            Name = "Nissan Sunny",
                            PricePerHour = 20.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 4,
                            Description = "Luxury SUV with off-road capability and elegance.",
                            ImageUrl = "PrivateTransports/Car/Range Rover Evoque.jpg",
                            IsAvailable = true,
                            Name = "Range Rover Evoque",
                            PricePerHour = 70.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 7,
                            Description = "Spacious full-size SUV perfect for families and groups.",
                            ImageUrl = "PrivateTransports/Car/Chevrolet Tahoe.jpg",
                            IsAvailable = true,
                            Name = "Chevrolet Tahoe",
                            PricePerHour = 65.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 4,
                            Description = "Economical and stylish sedan with modern features.",
                            ImageUrl = "PrivateTransports/Car/Hyundai Elantra.jpeg",
                            IsAvailable = true,
                            Name = "Hyundai Elantra",
                            PricePerHour = 25.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 4,
                            Description = "Classic American muscle car with powerful performance.",
                            ImageUrl = "PrivateTransports/Car/Ford Mustang.jpeg",
                            IsAvailable = true,
                            Name = "Ford Mustang",
                            PricePerHour = 80.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 4,
                            Description = "Electric luxury sedan with cutting-edge technology.",
                            ImageUrl = "PrivateTransports/Car/Tesla Model S.jpg",
                            IsAvailable = true,
                            Name = "Tesla Model S",
                            PricePerHour = 90.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 5,
                            Description = "Compact SUV with modern features and fuel efficiency.",
                            ImageUrl = "PrivateTransports/Car/Kia Sportage.jpg",
                            IsAvailable = true,
                            Name = "Kia Sportage",
                            PricePerHour = 35.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 4,
                            Description = "Spacious and comfortable sedan with great reliability.",
                            ImageUrl = "PrivateTransports/Car/Honda Accord.jpeg",
                            IsAvailable = true,
                            Name = "Honda Accord",
                            PricePerHour = 40.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 4,
                            Description = "Iconic off-road vehicle for adventure seekers.",
                            ImageUrl = "PrivateTransports/Car/Jeep Wrangler.jpeg",
                            IsAvailable = true,
                            Name = "Jeep Wrangler",
                            PricePerHour = 75.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 4,
                            Description = "Reliable and stylish German sedan.",
                            ImageUrl = "PrivateTransports/Car/Volkswagen Passat.jpeg",
                            IsAvailable = true,
                            Name = "Volkswagen Passat",
                            PricePerHour = 38.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 5,
                            Description = "Luxury sports SUV with high-end features.",
                            ImageUrl = "PrivateTransports/Car/Porsche Cayenne.jpg",
                            IsAvailable = true,
                            Name = "Porsche Cayenne",
                            PricePerHour = 100.0,
                            Quantity = 2,
                            TransportTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 15,
                            Description = "Luxury minibus with premium comfort.",
                            ImageUrl = "PrivateTransports/Bus/Mercedes-Benz Sprinter.jpg",
                            IsAvailable = true,
                            Name = "Mercedes-Benz Sprinter",
                            PricePerHour = 100.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 22,
                            Description = "Comfortable mid-sized bus for group travel.",
                            ImageUrl = "PrivateTransports/Bus/Toyota Coaster.jpeg",
                            IsAvailable = true,
                            Name = "Toyota Coaster",
                            PricePerHour = 80.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 20,
                            Description = "Efficient minibus for short trips.",
                            ImageUrl = "PrivateTransports/Bus/Hyundai County.jpeg",
                            IsAvailable = true,
                            Name = "Hyundai County",
                            PricePerHour = 75.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 26,
                            Description = "Reliable minibus for tourism and business trips.",
                            ImageUrl = "PrivateTransports/Bus/Mitsubishi Rosa.jpg",
                            IsAvailable = true,
                            Name = "Mitsubishi Rosa",
                            PricePerHour = 85.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 50,
                            Description = "Luxury long-distance coach with high-end features.",
                            ImageUrl = "PrivateTransports/Bus/Volvo 9700.jpg",
                            IsAvailable = true,
                            Name = "Volvo 9700",
                            PricePerHour = 200.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 50,
                            Description = "Premium luxury coach for VIP travel.",
                            ImageUrl = "PrivateTransports/Bus/Setra TopClass.jpeg",
                            IsAvailable = true,
                            Name = "Setra TopClass",
                            PricePerHour = 220.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 18,
                            Description = "Economical minibus for group transport.",
                            ImageUrl = "PrivateTransports/Bus/Iveco Daily Minibus.jpeg",
                            IsAvailable = true,
                            Name = "Iveco Daily Minibus",
                            PricePerHour = 90.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 35,
                            Description = "Spacious tourist bus for comfortable travel.",
                            ImageUrl = "PrivateTransports/Bus/King Long XMQ6900.jpg",
                            IsAvailable = true,
                            Name = "King Long XMQ6900",
                            PricePerHour = 110.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 55,
                            Description = "Luxury coach with modern amenities.",
                            ImageUrl = "PrivateTransports/Bus/Scania Touring HD.jpg",
                            IsAvailable = true,
                            Name = "Scania Touring HD",
                            PricePerHour = 180.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 50,
                            Description = "High-end tourist coach for long-distance trips.",
                            ImageUrl = "PrivateTransports/Bus/MAN Lion’s Coach.jpeg",
                            IsAvailable = true,
                            Name = "MAN Lion’s Coach",
                            PricePerHour = 195.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 55,
                            Description = "Luxury coach designed for tourism and comfort.",
                            ImageUrl = "PrivateTransports/Bus/Mercedes Tourismo.jpeg",
                            IsAvailable = true,
                            Name = "Mercedes Tourismo",
                            PricePerHour = 210.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 80,
                            Description = "Double-decker coach for large group tours.",
                            ImageUrl = "PrivateTransports/Bus/Neoplan Skyliner.jpg",
                            IsAvailable = true,
                            Name = "Neoplan Skyliner",
                            PricePerHour = 250.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 45,
                            Description = "Reliable and affordable coach for daily transport.",
                            ImageUrl = "PrivateTransports/Bus/Yutong ZK6122.jpeg",
                            IsAvailable = true,
                            Name = "Yutong ZK6122",
                            PricePerHour = 140.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 50,
                            Description = "High-performance luxury coach for premium travel.",
                            ImageUrl = "PrivateTransports/Bus/Volvo B11R.jpeg",
                            IsAvailable = true,
                            Name = "Volvo B11R",
                            PricePerHour = 230.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 48,
                            Description = "Spacious coach with modern amenities.",
                            ImageUrl = "PrivateTransports/Bus/Golden Dragon XML6127.jpeg",
                            IsAvailable = true,
                            Name = "Golden Dragon XML6127",
                            PricePerHour = 160.0,
                            Quantity = 2,
                            TransportTypeId = 2
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 2,
                            Description = "The scoter is a type of sea duck that lives in cold and temperate regions.",
                            ImageUrl = "PrivateTransports/Damon Hypersport.webp",
                            IsAvailable = true,
                            Name = "Damon Hypersport",
                            PricePerHour = 160.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 2,
                            Description = "Scooters are easy to handle and convenient for daily transportation.",
                            ImageUrl = "PrivateTransports/Honda CB650R.jpg",
                            IsAvailable = true,
                            Name = "Honda CB650R",
                            PricePerHour = 250.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 2,
                            Description = "There are three main species of scoter: the black scoter, the surf scoter, and the velvet scoter",
                            ImageUrl = "PrivateTransports/Honda CBR1000RR Fireblade.png",
                            IsAvailable = true,
                            Name = "Honda CBR1000RR Fireblade",
                            PricePerHour = 200.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 2,
                            Description = "Scoters primarily feed on mollusks, crustaceans, and small fish",
                            ImageUrl = "PrivateTransports/Kawasaki Ninja.jpeg",
                            IsAvailable = true,
                            Name = "Kawasaki Ninja",
                            PricePerHour = 170.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 2,
                            Description = "They have dark-colored feathers, with males usually appearing blacker than females.",
                            ImageUrl = "PrivateTransports/KTM Duke 1290 R.jpg",
                            IsAvailable = true,
                            Name = "KTM Duke 1290 R",
                            PricePerHour = 130.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 2,
                            Description = "Scoters prefer coastal waters and large water bodies like lakes and rivers.",
                            ImageUrl = "PrivateTransports/Lightning LS-218.jpg",
                            IsAvailable = true,
                            Name = "Lightning LS-218",
                            PricePerHour = 110.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 2,
                            Description = "Electric scooters are commonly used for short-distance travel in cities.",
                            ImageUrl = "PrivateTransports/my22-tiger-1200-gt-explorer-lucerne-blue-rhs-1080.png",
                            IsAvailable = true,
                            Name = "my22-tiger-1200-gt-explorer",
                            PricePerHour = 120.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 2,
                            Description = "Kick scooters are popular among children and some commuters.",
                            ImageUrl = "PrivateTransports/Suzuki GSX R1000.jpeg",
                            IsAvailable = true,
                            Name = "Suzuki GSX R1000",
                            PricePerHour = 150.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 2,
                            Description = "Scooters are easy to handle and convenient for daily transportation.",
                            ImageUrl = "PrivateTransports/Yamaha YZF.jpg",
                            IsAvailable = true,
                            Name = "Yamaha YZF",
                            PricePerHour = 100.0,
                            Quantity = 4,
                            TransportTypeId = 3
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 1,
                            Description = "A sleek and lightweight bicycle built for speed and long-distance rides on paved roads",
                            ImageUrl = "PrivateTransports/Bike/Road_Bike.jpg",
                            IsAvailable = true,
                            Name = "Road Bike",
                            PricePerHour = 70.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 1,
                            Description = "A rugged bike built for off-road trails",
                            ImageUrl = "PrivateTransports/Bike/Mountain_Bike.jpg",
                            IsAvailable = true,
                            Name = "Mountain Bike",
                            PricePerHour = 50.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 1,
                            Description = "Designed for daily urban commuting",
                            ImageUrl = "PrivateTransports/Bike/City_Commuter_Bike.jpg",
                            IsAvailable = true,
                            Name = "City Commuter Bike",
                            PricePerHour = 40.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 1,
                            Description = "A stylish and relaxed bicycle for leisurely rides",
                            ImageUrl = "PrivateTransports/Bike/Cruiser_Bike.jpg",
                            IsAvailable = true,
                            Name = "Cruiser Bike",
                            PricePerHour = 60.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 1,
                            Description = "A modern bicycle with an electric motor and battery for pedal-assist riding, ideal for long distances and commuting with ease and less effort.",
                            ImageUrl = "PrivateTransports/Bike/Electric_Bike.jpg",
                            IsAvailable = true,
                            Name = "Electric Bike",
                            PricePerHour = 140.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 1,
                            Description = "Endurance-focused road bike with IsoSpeed technology for smoother rides over long distances.",
                            ImageUrl = "PrivateTransports/Bike/Trek_Domane_SL_6.jpg",
                            IsAvailable = true,
                            Name = "Trek Domane SL 6",
                            PricePerHour = 150.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 1,
                            Description = "A performance alloy race bike with aggressive geometry, ideal for speed and competitive cycling.",
                            ImageUrl = "PrivateTransports/Bike/Specialized.jpg",
                            IsAvailable = true,
                            Name = "Specialized Allez Sprint Comp",
                            PricePerHour = 170.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 1,
                            Description = "A versatile hardtail mountain bike with front suspension, perfect for beginner to intermediate trail",
                            ImageUrl = "PrivateTransports/Bike/Cannondale.jpg",
                            IsAvailable = true,
                            Name = "Cannondale Trail 5",
                            PricePerHour = 120.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 1,
                            Description = "A lightweight hybrid city bike designed for efficient daily commuting and fitness rides.",
                            ImageUrl = "PrivateTransports/Bike/Giant.jpg",
                            IsAvailable = true,
                            Name = "Giant Escape 3",
                            PricePerHour = 130.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 1,
                            Description = "A commuter-focused e-bike with a powerful motor, integrated lights, and a rear rack.",
                            ImageUrl = "PrivateTransports/Bike/Rad_Power.jpg",
                            IsAvailable = true,
                            Name = "Rad Power Bikes RadCity 5 Plus",
                            PricePerHour = 150.0,
                            Quantity = 10,
                            TransportTypeId = 4
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransportReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("PrivateTransportId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTransportId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateTransportReviews", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PublicTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("PublicTransports", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("SalaryPerHour")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuides", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A passionate tour guide with in-depth knowledge of historical landmarks and cultural heritage, dedicated to providing engaging and educational experiences.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Experienced tour guide specializing in archaeological sites, offering insightful narratives that bring history to life.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Friendly and knowledgeable guide, ensuring every visitor enjoys a personalized and immersive travel experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Expert in local history and traditions, delivering memorable tours that blend education and entertainment.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "A dynamic storyteller who transforms every tour into a fascinating journey through time and culture.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fluent in multiple languages, offering exceptional guided experiences for travelers from around the world.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Skilled in adventure tourism, leading exciting and informative tours through natural wonders and historical landmarks.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Passionate about sharing hidden gems and off-the-beaten-path locations with travelers seeking authentic experiences.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "A certified tour guide with years of experience, ensuring visitors gain deep insights into historical and modern attractions.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Dedicated to providing an unforgettable journey through historical sites, blending education with entertainment.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 11,
                            Description = "An enthusiastic guide who loves connecting people with the rich history and traditions of the region.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "Expert in eco-tourism, offering sustainable and immersive travel experiences for nature lovers.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 13,
                            Description = "Combining storytelling with historical facts to create engaging and interactive guided tours.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 14,
                            Description = "A charismatic and knowledgeable guide, ensuring tourists leave with a deeper appreciation for the destination.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 15,
                            Description = "Certified heritage interpreter, offering in-depth explorations of ancient and modern cultural landmarks.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 16,
                            Description = "Well-versed in local customs, history, and cuisine, providing a holistic travel experience for every visitor.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 4000.0,
                            UserId = "52511e3a-0690-45b0-9e52-02667a473b18",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = 17,
                            Description = "Professional and friendly guide who creates customized tours to meet the interests of each group.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 750.0,
                            UserId = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            Id = 18,
                            Description = "A history enthusiast dedicated to making every tour an unforgettable and enriching experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 700.0,
                            UserId = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = 19,
                            Description = "Providing top-tier guided tours that blend adventure, history, and culture for an unforgettable experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 750.0,
                            UserId = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            YearsOfExperience = 5
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuideReviews", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "TourGuideId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourGuideTrips", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "TransportTypes/Cars.jpg",
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "TransportTypes/Buses.jpg",
                            Name = "Bus"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "TransportTypes/Scoters.jpg",
                            Name = "Scoter"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "TransportTypes/Bikes.jpg",
                            Name = "bicycle"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("BackTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublicTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PublicTransportId");

                    b.ToTable("Trips", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Workings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bded8535075",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be08dd83078",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ce2fd704-7a3c-4a03-846e-c5479a8b921d",
                            ConcurrencyStamp = "aacecacd-28e1-43cc-92da-decb1f9b32c4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3",
                            ConcurrencyStamp = "B1F115C4-D298-4C6D-AA7B-6C7DC785A1C5",
                            Name = "TourGuide",
                            NormalizedName = "TOURGUIDE"
                        },
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bdf740adff8",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be100f11384",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            RoleId = "0191d311-2918-7f76-bd8a-0bded8535075"
                        },
                        new
                        {
                            UserId = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "52511e3a-0690-45b0-9e52-02667a473b18",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.AreaType", "AreaType")
                        .WithMany("Areas")
                        .HasForeignKey("AreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaImages")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Working", "Working")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("WorkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Working");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "EventDate")
                        .WithMany()
                        .HasForeignKey("EventDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingEventDates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Hotel", "Hotel")
                        .WithMany("BookingHotels")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingHotels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.PrivateTransport", "PrivateTransport")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("PrivateTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTransport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("BookingTourGuides")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingTourGuides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("BookingTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Event", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Historical", "Historical")
                        .WithMany("HistoricalImages")
                        .HasForeignKey("HistoricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historical");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", null)
                        .WithMany("Items")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TransportType", "TransportType")
                        .WithMany("PrivateTransports")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransportReview", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.PrivateTransport", "PrivateTransport")
                        .WithMany()
                        .HasForeignKey("PrivateTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTransport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideReview", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("TourGuideReviews")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("TourGuideReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("Trips")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.PublicTransport", "PublicTransport")
                        .WithMany()
                        .HasForeignKey("PublicTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("PublicTransport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaImages");

                    b.Navigation("AreaWorkings");

                    b.Navigation("Items");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Navigation("HistoricalImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("BookingHotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("BookingEventDates");

                    b.Navigation("BookingHotels");

                    b.Navigation("BookingPrivateTransports");

                    b.Navigation("BookingTourGuides");

                    b.Navigation("BookingTrips");

                    b.Navigation("Reports");

                    b.Navigation("TourGuideReviews");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Navigation("BookingPrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Navigation("BookingTourGuides");

                    b.Navigation("TourGuideReviews");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Navigation("PrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Navigation("BookingTrips");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Navigation("AreaWorkings");
                });
#pragma warning restore 612, 618
        }
    }
}
