// <auto-generated />
using System;
using Egyptos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egyptos.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316175328_AddSeadingDataForHotelsTable")]
    partial class AddSeadingDataForHotelsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaTypeId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "WorkingId");

                    b.HasIndex("WorkingId");

                    b.ToTable("AreaWorkings");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventDateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventDateId");

                    b.HasIndex("EventDateId");

                    b.ToTable("BookingEventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("UserId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("BookingHotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentCancel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrivateTransportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateTransportId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingPrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartBooking")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TourGuideId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingTourGuides");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("BookingTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndSubscription")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveToSubscribe")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartSubscription")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Historicals");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoricalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalId");

                    b.ToTable("HistoricalImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo international Airport  terminal 3, Heliopolis, 11341 Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/19xBNPS8M2/",
                            ImageUrl = "Hotels/Cairo/1.jpg",
                            Location = "https://maps.app.goo.gl/T1mGFtYJn9cJWD4D8",
                            Name = "Le Meridien Cairo Airport",
                            PhoneNumber = "+202-22659600",
                            PricePerHour = 5812.0,
                            WebSite = "https://www.marriott.com/en-us/hotels/caiam-le-meridien-cairo-airport/overview/"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Corniche El Nile, Garden City,Cairo",
                            Facebook = "https://www.facebook.com/share/1EjVfEV71A/",
                            ImageUrl = "Hotels/Cairo/2.jpg",
                            Location = "https://maps.app.goo.gl/tVUyS3rJnpt5YJyE7",
                            Name = "Hilton Cairo Grand Nile",
                            PhoneNumber = "0-223651234",
                            PricePerHour = 6400.0,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwj6lfPF_4uMAxXsa0ECHbnaFVMYABAEGgJ3cw&co=1&ase=2&gclid=EAIaIQobChMI-pXzxf-LjAMV7GtBAh252hVTEAAYASAAEgK3afD_BwE&ohost=www.google.com&cid=CAASJeRoTO3di9EUVIgV7C3WwqJMXHsOhdz4AF8DeGrvCpcDDz6EZx0&sig=AOD64_0sDqYVCCLNjHXPtzKU7Z81PrausA&q&nis=4&adurl&ved=2ahUKEwi2ie3F_4uMAxU9aqQEHbD2MR4Q0Qx6BAgmEAE"
                        },
                        new
                        {
                            Id = 3,
                            Address = "1089 Corniche El Nil - Garden City, Garden City, 11519 Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1D9key9seU/",
                            ImageUrl = "Hotels/Cairo/3.jpg",
                            Location = "https://maps.app.goo.gl/uLzPGyqS8B5zXwDz5",
                            Name = "Four Seasons Hotel Cairo at Nile Plaza",
                            PhoneNumber = "20227917000",
                            PricePerHour = 14500.0,
                            WebSite = "https://www.fourseasons.com/caironp/"
                        },
                        new
                        {
                            Id = 4,
                            Address = "1115 Corniche El Nile, Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1BiBZudYV5/",
                            ImageUrl = "Hotels/Cairo/4.jpg",
                            Location = "https://maps.app.goo.gl/pAFd6BYRXbJDsDgm9",
                            Name = "Ramses Hilton Hotel & Casino",
                            PhoneNumber = "+20225777444",
                            PricePerHour = 6500.0,
                            WebSite = "https://www.hilton.com/en/hotels/cairhtw-ramses-hilton/"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Kasr El Nile, Cairo, Egypt",
                            Facebook = "https://www.facebook.com/share/1ZTLj6XCvb/",
                            ImageUrl = "Hotels/Cairo/5.jpg",
                            Location = "https://maps.app.goo.gl/JekkeR5bGjgmv5my6",
                            Name = "Steigenberger Hotel El Tahrir Cairo",
                            PhoneNumber = "0-225750777",
                            PricePerHour = 5500.0,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwjSl4S_iIyMAxUrCqIDHUHaF3AYABAEGgJsZQ&co=1&gclid=EAIaIQobChMI0peEv4iMjAMVKwqiAx1B2hdwEAAYAiAAEgLKRvD_BwE&ohost=www.google.com&cid=CAASJeRoqb3A8_W_cCI2Psh5SfgGlWkPy5sBG63KSSJLTrvfQUMPBi4&sig=AOD64_1-nv5EhB35HIIna2-AlbmHpbeh7A&q&adurl&ved=2ahUKEwjpk_2-iIyMAxWhR_EDHZMFLEUQ0Qx6BAgUEAQ"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Al-Sahaby Lan,In Front Of Luxor Temple, East Bank, 99999 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/1ADhARSWdh/",
                            ImageUrl = "Hotels/Luxor/6.jpg",
                            Location = "https://maps.app.goo.gl/taGD5XMjwVkLj5Bp8",
                            Name = "Nefertiti Hotel Luxor",
                            PhoneNumber = "010 00329991",
                            PricePerHour = 2200.0,
                            WebSite = "https://www.nefertitihotel.com/"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Corniche El Nile Street, East Bank, Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/19x25D4GZe/",
                            ImageUrl = "Hotels/Luxor/7.jpg",
                            Location = "https://maps.app.goo.gl/2sp1DeDrgQ6bxC2m7",
                            Name = "Sonesta St. George Hotel - Convention Center",
                            PhoneNumber = "0-952382575",
                            PricePerHour = 7000.0,
                            WebSite = "https://www.sonesta.com/sonesta-hotels-resorts/egy/luxor/sonesta-st-george-hotel-luxor"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Awameya Road, Kings Island, East Bank, Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/1AQsRLfAoM/",
                            ImageUrl = "Hotels/Luxor/8.jpg",
                            Location = "https://maps.app.goo.gl/SWxUCeSidWjqUVsM8",
                            Name = "Jolie Ville Hotel & Spa Kings Island Luxor",
                            PhoneNumber = "0-952274855",
                            PricePerHour = 6000.0,
                            WebSite = "https://jolievilleluxor.com/"
                        },
                        new
                        {
                            Id = 9,
                            Address = "17,Cornish El Nile Street,Beside Luxor Temple, East Bank, 99999 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/15nAkdSbP8/",
                            ImageUrl = "Hotels/Luxor/9.jpg",
                            Location = "https://maps.app.goo.gl/4DsSer455PztnBGo8",
                            Name = "Pavillon Winter Luxor",
                            PhoneNumber = "0-952380425",
                            PricePerHour = 7000.0,
                            WebSite = "https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwjDgYfKmoyMAxV5BQYAHRrGM7wYABAEGgJ3cw&ae=2&aspm=1&co=1&ase=5&gclid=EAIaIQobChMIw4GHypqMjAMVeQUGAB0axjO8EAAYASAAEgLgRvD_BwE&ei=rYLVZ7vmL6SLxc8P9cOYkAw&ohost=www.google.com&cid=CAASJeRoS2XDjppD17JTFEutBMaPIvZPSH-pw60RI3ka_-LGXrL7l10&sig=AOD64_3re-b14AO6-AkKUHYmMwsAlmfK-w&q&sqi=2&adurl&ved=2ahUKEwj78IDKmoyMAxWkRfEDHfUhBsIQ0Qx6BAgSEAE"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Al Qarna Road, West Bank, 85951 Luxor, Egypt",
                            Facebook = "https://www.facebook.com/share/16QVjxXGGN/",
                            ImageUrl = "Hotels/Luxor/10.jpg",
                            Location = "https://maps.app.goo.gl/qWGCp6VA6TVvX8UX9",
                            Name = "Kemet House",
                            PhoneNumber = "0-1016649967",
                            PricePerHour = 9000.0,
                            WebSite = "https://kemet-house.com/"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Aswan,Corniche El Nile Baharive, Abu El Rish Qebli, 81111 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/15jBHzKKJn/",
                            ImageUrl = "Hotels/Aswan/11.jpg",
                            Location = "https://maps.app.goo.gl/Bq11U6FzbR8bpnFr9",
                            Name = "Sonesta Nouba Hotel Aswan",
                            PhoneNumber = "011 18837500",
                            PricePerHour = 9000.0,
                            WebSite = "https://www.sonesta.com/sonesta-hotels-resorts/egy/qism-aswan/sonesta-nouba-hotel-aswan"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Corniche El Nil, 99999 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/12JNbMmPysK/",
                            ImageUrl = "Hotels/Aswan/12.jpg",
                            Location = "https://maps.app.goo.gl/bFewEQ87bMmz5CTq5",
                            Name = "Pyramisa Island Hotel Aswan",
                            PhoneNumber = "20 97-231-7400",
                            PricePerHour = 8500.0,
                            WebSite = "https://pyramisaislandaswan.com-egypt.com/"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Nile Corniche, Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/1DsSQWkGjK/",
                            ImageUrl = "Hotels/Aswan/13.jpg",
                            Location = "https://maps.app.goo.gl/DuvevXgLkJ62tYPS7",
                            Name = "Tolip Aswan Hotel",
                            PhoneNumber = "097 2328828",
                            PricePerHour = 13000.0,
                            WebSite = "https://tolipgroup.com/tolip-hotel-aswan/"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Elephantine Island, 31911571 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/19E12Rf3cU/",
                            ImageUrl = "Hotels/Aswan/14.jpg",
                            Location = "https://maps.app.goo.gl/wJiiJhk1kCyrvaAh7",
                            Name = "Labib Guest House",
                            PhoneNumber = "011 12175285",
                            PricePerHour = 7000.0,
                            WebSite = "https://hotel-menara.com/accommodation/aswan/labib-guest-house/360902"
                        },
                        new
                        {
                            Id = 15,
                            Address = "In Front Of The Nubian Museum,, 99999 Aswan, Egypt",
                            Facebook = "https://www.facebook.com/share/14anpY3Nho/",
                            ImageUrl = "Hotels/Aswan/15.jpg",
                            Location = "https://maps.app.goo.gl/mzodEEh8ssw7qx4c8",
                            Name = "Basma Hotel Aswan",
                            PhoneNumber = "097 2484001",
                            PricePerHour = 7000.0,
                            WebSite = "https://basmahotel.com/contacts/"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Lake Karoun, 99999 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/share/19bAuXS1ex/",
                            ImageUrl = "Hotels/Fayoum/16.jpg",
                            Location = "https://maps.app.goo.gl/7wvDbfhGAhLni4Ce7",
                            Name = "Helnan Auberge Fayoum",
                            PhoneNumber = "084 2981200",
                            PricePerHour = 10000.0,
                            WebSite = "https://www.helnan.com/en/Hotel/helnan-auberge-fayoum/?hid=a15a6247-ca00-4bba-86d6-854019538c8c&id="
                        },
                        new
                        {
                            Id = 17,
                            Address = "Tunes village, 29000 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/share/1H3xPZVxez/",
                            ImageUrl = "Hotels/Fayoum/17.jpg",
                            Location = "https://maps.app.goo.gl/MsafYu4quFJrALkv7",
                            Name = "Tzila Lodge",
                            PhoneNumber = "010 05383653",
                            PricePerHour = 7000.0,
                            WebSite = "https://tzila.com/"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Wadi El Rayyan Road, 63511 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/tache.fayoumm/",
                            ImageUrl = "Hotels/Fayoum/18.jpg",
                            Location = "https://maps.app.goo.gl/gdrtZrNkBGMK5euC7",
                            Name = "Tache By The Lake",
                            PhoneNumber = "010 03535100",
                            PricePerHour = 6000.0,
                            WebSite = "https://www.instagram.com/tache.fayoum/?hl=ar"
                        },
                        new
                        {
                            Id = 19,
                            Address = "Tunis Village, 63626 Fayoum Center, Egypt",
                            Facebook = "https://www.facebook.com/tunisvillageOfficiel/?locale=hi_IN",
                            ImageUrl = "Hotels/Fayoum/19.jpg",
                            Location = "https://maps.app.goo.gl/8h8ig2tey58XwnXf6",
                            Name = "Tunis Village Chalet",
                            PhoneNumber = "01080537444",
                            PricePerHour = 4000.0,
                            WebSite = "https://en.tunisvillage-eg.com/contact"
                        },
                        new
                        {
                            Id = 20,
                            Address = "23 KM Port Said – Damyetta Road, El diba, Egypt, 10000 Port Said, Egypt",
                            Facebook = "https://www.facebook.com/PortoSaidResortOfficial/",
                            ImageUrl = "Hotels/Port Said/20.jpg",
                            Location = "https://maps.app.goo.gl/9fSCrKCPKRiW5ka28",
                            Name = "Porto Said Resort & Spa",
                            PhoneNumber = "01278641045",
                            PricePerHour = 2000.0,
                            WebSite = "https://www.portohotelseg.com/said-resort/contact"
                        },
                        new
                        {
                            Id = 21,
                            Address = "Sultan Hussein St, Port Said, Egypt",
                            Facebook = "https://www.facebook.com/restaportsaid/?locale=ar_AR",
                            ImageUrl = "Hotels/Port Said/21.jpg",
                            Location = "https://maps.app.goo.gl/ZUCtqTJbDAsjKBNR7",
                            Name = "Resta Port Said Hotel",
                            PhoneNumber = "066 3200511",
                            PricePerHour = 6000.0,
                            WebSite = "https://www.booking.com/hotel/eg/resta-port-said.ar.html"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Port Said, Atef El-Sadat Street Madînet, Portsaid, Port Said Governorate 42511, 42511 Port Said, Egypt",
                            Facebook = "https://www.facebook.com/GrandHotel.eg/",
                            ImageUrl = "Hotels/Port Said/22.jpg",
                            Location = "https://maps.app.goo.gl/7hRWvSLypY1vF6gQ7",
                            Name = "Grand Hotel Port Said",
                            PhoneNumber = "066 3267550",
                            PricePerHour = 3500.0,
                            WebSite = "https://www.instagram.com/grandhotelportsaid/"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Al Zaim Ghandi St Atef El Sadat St",
                            Facebook = "https://www.facebook.com/maromportsaid/",
                            ImageUrl = "Hotels/Port Said/23.jpg",
                            Location = "https://maps.app.goo.gl/ePCJL1sivDZkdzNr6",
                            Name = "Marom Port Said Resort & Beach",
                            PhoneNumber = "012 22111321",
                            PricePerHour = 3100.0,
                            WebSite = "https://maromhotels.com/ar/"
                        },
                        new
                        {
                            Id = 24,
                            Address = "Atef El Sadat Street , Port Fouad",
                            Facebook = "https://m.facebook.com/profile.php?id=117377931674556",
                            ImageUrl = "Hotels/Port Said/24.jpg",
                            Location = "https://maps.app.goo.gl/nPGd4LFhWH3i1VGy6",
                            Name = "Helnan Port Said",
                            PhoneNumber = "0663456669",
                            PricePerHour = 2500.0,
                            WebSite = "https://www.helnan.com/fr/RoomDetails/helnan-port-said-hotel/?id=d64d57b3-0524-41ca-8411-2a8cb5333d80&hid=711bd3e2-7d02-49e4-8606-1e85d0aca2c9"
                        },
                        new
                        {
                            Id = 25,
                            Address = "16, Mohamed aly street De Lesseps,ismailia,Egypt, 8361240 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/maisonmaximdelesseps/",
                            ImageUrl = "Hotels/Ismailia/25.jpg",
                            Location = "https://maps.app.goo.gl/CLEyccR8LMhYkquE6",
                            Name = "Maison Maxim De Lesseps",
                            PhoneNumber = "010 94888121",
                            PricePerHour = 5500.0,
                            WebSite = "https://maisonmaximdelesseps.com/?lang=ar"
                        },
                        new
                        {
                            Id = 26,
                            Address = "El-Shaheed Abd El-Moneim Riad Road, 41515 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/TOLIPELFORSAN/",
                            ImageUrl = "/Hotels/Ismailia/26.jpg",
                            Location = "https://maps.app.goo.gl/DUYKea7wjKHSpffQA",
                            Name = "Tolip El Forsan Hotel",
                            PhoneNumber = "01060779118",
                            PricePerHour = 5600.0,
                            WebSite = "https://tolipgroup.com/tolip-resort-el-forsan-ismailia/"
                        },
                        new
                        {
                            Id = 27,
                            Address = "Nemra 6, 41622 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/GOLJEWISM/?locale=ar_AR",
                            ImageUrl = "Hotels/Ismailia/27.jpg",
                            Location = "https://maps.app.goo.gl/B1vDRjbPg8NnwRhs9",
                            Name = "Golden Jewel Ismailia Resort",
                            PhoneNumber = "011 52287777",
                            PricePerHour = 3900.0,
                            WebSite = "https://jewelhotels.net/hotel/golden-jewel-ismailia"
                        },
                        new
                        {
                            Id = 28,
                            Address = "Forsan Island, 41511 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/MercureIsmailia/",
                            ImageUrl = "Hotels/Ismailia/28.jpg",
                            Location = "https://maps.app.goo.gl/BGn4yPBBUVd66YFMA",
                            Name = "Mercure Ismailia Forsan Island",
                            PhoneNumber = "01227011086",
                            PricePerHour = 4700.0,
                            WebSite = "https://www.instagram.com/mercure_ismailia_forsan_island/?hl=ar"
                        },
                        new
                        {
                            Id = 29,
                            Address = "Ismailia Cooperation Area, 11111 Ismailia, Egypt",
                            Facebook = "https://www.facebook.com/100057534216384/videos/villa-ali-ali-villas-tobago-plantations-estate/1142269550326102/",
                            ImageUrl = "Hotels/Ismailia/29.jpg",
                            Location = "https://maps.app.goo.gl/eb6x4MTTyc5pkdCK7",
                            Name = "VIP villa Ali",
                            PhoneNumber = " 0792807762",
                            PricePerHour = 2600.0,
                            WebSite = "https://www.instagram.com/explore/locations/1762370497115752/vip-villa/"
                        },
                        new
                        {
                            Id = 30,
                            Address = "El Galaa Street, behind Omar Effendi, Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/Adriaticahotel.marsamatruh/",
                            ImageUrl = "Hotels/Marsa Matrouh/30.jpg",
                            Location = "https://maps.app.goo.gl/SuaWHgf6tACZgtuV8",
                            Name = "Adriatica Hotel Marsa Matrouh",
                            PhoneNumber = "046 4938696",
                            PricePerHour = 1570.0,
                            WebSite = "https://www.instagram.com/explore/locations/948309694/adriatica-hotel-marsa-matruh/"
                        },
                        new
                        {
                            Id = 31,
                            Address = "Ras El hekma North Coast, Marsa Matruh, 51512 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/MarmaricaBoutiqueCabanas/",
                            ImageUrl = "Hotels/Marsa Matrouh/31.jpg",
                            Location = "https://maps.app.goo.gl/aKRPLMDmbt4NPtJJ9",
                            Name = "Marmarica Boutique Cabanas - Ras El Hekma - North Coast",
                            PhoneNumber = "011 00101919",
                            PricePerHour = 30500.0,
                            WebSite = "https://marmarica.com/"
                        },
                        new
                        {
                            Id = 32,
                            Address = "P.O Box 51511 - Marsa Matrouh, 51511 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/SafirMarsaMatrouhResort/",
                            ImageUrl = "Hotels/Marsa Matrouh/32.jpg",
                            Location = "https://maps.app.goo.gl/Dfu4ri44VrcWwWdL7",
                            Name = "Safir Marsa Matrouh Resort",
                            PhoneNumber = "012 72409648",
                            PricePerHour = 2300.0,
                            WebSite = "https://www.safirhotels.com/en/press/New-Opening-Safir-Marsa-Matrouh"
                        },
                        new
                        {
                            Id = 33,
                            Address = "120 Alexandria - Marsa Matrouh Road Beside Elhamraa Port, 51718 Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/p/Tolip-Resort-Paradise-New-Alamien-100092546733324/",
                            ImageUrl = "Hotels/Marsa Matrouh/33.jpg",
                            Location = "https://maps.app.goo.gl/SG8yYpntzBhZJaNh6",
                            Name = "Tolip Resort Paradise",
                            PhoneNumber = "+20 100 981 5908",
                            PricePerHour = 7500.0,
                            WebSite = "https://tolipgroup.com/tolip-resort-paradise-new-alamein/contact-us/"
                        },
                        new
                        {
                            Id = 34,
                            Address = "Almaza Bay, 37 km East Mersa Matruh,, Marsa Matruh, Egypt",
                            Facebook = "https://www.facebook.com/jazalmazabayresorts/",
                            ImageUrl = "Hotels/Marsa Matrouh/34.jpg",
                            Location = "https://maps.app.goo.gl/3tfMe7RbGgZ99rGr6",
                            Name = "JAZ Almaza Beach Resort, Almaza Bay",
                            PhoneNumber = "010 66699942",
                            PricePerHour = 3400.0,
                            WebSite = "https://www.jazhotels.com/hoteldetail/30-egypt-almaza-bay-jaz-almaza-beach-resort"
                        },
                        new
                        {
                            Id = 35,
                            Address = "0 km Safaga El Queseir Road Hurghada, 84711, Égypte, 84711 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/tuimagiclifekalawy/",
                            ImageUrl = "Hotels/Hurghada/35.jpg",
                            Location = "https://maps.app.goo.gl/oe9njhAxYUjBGvV8A",
                            Name = "TUI MAGIC LIFE Kalawy",
                            PhoneNumber = "065 3200021",
                            PricePerHour = 10000.0,
                            WebSite = "https://tuimagiclifekalawy.com-hurghada.com/"
                        },
                        new
                        {
                            Id = 36,
                            Address = "Sahl Hashish Road, 84521 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/SahlHasheesh.de/videos/flow-spectrum-resort-sahl-hasheesh/9498118343552521/",
                            ImageUrl = "Hotels/Hurghada/36.jpg",
                            Location = "https://maps.app.goo.gl/MewaZ5NqV1EZbzCM7",
                            Name = "Flow Spectrum Resort Sahl Hasheesh",
                            PhoneNumber = "012 78575677",
                            PricePerHour = 4400.0,
                            WebSite = "https://resortflowspectrumhasheesh.hotelshurghada.com/en/"
                        },
                        new
                        {
                            Id = 37,
                            Address = "El Helal District, 84511 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Al-Dora-Residence-100067650841951/",
                            ImageUrl = "Hotels/Hurghada/37.jpg",
                            Location = "https://maps.app.goo.gl/9UHVv16NevVbSt5a6",
                            Name = "Al Dora Resort All Inclusive Hotel",
                            PhoneNumber = "011 11167642",
                            PricePerHour = 3900.0,
                            WebSite = "https://resortaldorainclusive.hotelshurghada.com/en/"
                        },
                        new
                        {
                            Id = 38,
                            Address = "El Helal District, Hurghada 2, Red Sea Governorate, 84511 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Davinciresort-100067030293671/",
                            ImageUrl = "Hotels/Hurghada/38.jpg",
                            Location = "https://maps.app.goo.gl/7ErjzsrNA27dzcsT7",
                            Name = "Davinci Beach Resort",
                            PhoneNumber = " 653557868 ",
                            PricePerHour = 1800.0,
                            WebSite = "https://da-vinci-beach.hotel-hurghada.com/en/"
                        },
                        new
                        {
                            Id = 39,
                            Address = "El-Bahr, 1973706 Hurghada, Egypt",
                            Facebook = "https://www.facebook.com/p/Geisum-Village-Hurghada-100069093702673/",
                            ImageUrl = "Hotels/Hurghada/39.jpg",
                            Location = "https://maps.app.goo.gl/BojPre5JkyGf1HZ19",
                            Name = "New Gaisum Resort",
                            PhoneNumber = "065 3546692",
                            PricePerHour = 2300.0,
                            WebSite = "https://el-geisum-village.hotel-hurghada.com/en/"
                        },
                        new
                        {
                            Id = 40,
                            Address = "Moustafa Kamel, Corniche Road Roshdy, Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/14q1Rp793o/",
                            ImageUrl = "Hotels/Alexandria/40.jpg",
                            Location = "https://maps.app.goo.gl/UhovkS9WJskex7ek6",
                            Name = "Tolip",
                            PhoneNumber = "035419330",
                            PricePerHour = 5000.0,
                            WebSite = "https://tolipgroup.com/tolip-hotel-royal-alexandria/"
                        },
                        new
                        {
                            Id = 41,
                            Address = "Corniche Road Sidi Gaber Alexandria Corniche Road Sidi Gaber Alexandria, 21523 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/1YgyBKhYXQ/",
                            ImageUrl = "Hotels/Alexandria/41.jpg",
                            Location = "https://maps.app.goo.gl/H8FVHuTmgLnfKW1QA",
                            Name = "Golden Jewel Beach&Hotel",
                            PhoneNumber = "035442380",
                            PricePerHour = 3400.0,
                            WebSite = "https://www.jewelhotels.net/hotel/golden-jewel-hotel-alexandria"
                        },
                        new
                        {
                            Id = 42,
                            Address = "14th May Avenue, Smouha, 21648 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/1ARavY4jGT/",
                            ImageUrl = "Hotels/Alexandria/42.jpg",
                            Location = "https://maps.app.goo.gl/AGW3nfkVgTBX24Jr9",
                            Name = "The Grand Plaza Hotel Smouha",
                            PhoneNumber = "033786100",
                            PricePerHour = 2900.0,
                            WebSite = "https://www.tgphotels.com/"
                        },
                        new
                        {
                            Id = 43,
                            Address = "1 Digla Street, Al Ramel Station, Corniche Road, 00203 Alexandria, EgyptAfter booking, all of the property’s details, including telephone and address, are provided in your booking confirmation and your account.",
                            Facebook = "https://www.facebook.com/share/15EyLh2pvi/",
                            ImageUrl = "Hotels/Alexandria/43.jpg",
                            Location = "https://maps.app.goo.gl/RFR5cGFmQzi5eAb7A",
                            Name = "Fouad Hotel",
                            PhoneNumber = "034808308",
                            PricePerHour = 1100.0,
                            WebSite = "https://x.com/FouadResv?fbclid=IwZXh0bgNhZW0CMTEAAR1Kn6p5zx9-H-Ej1e6ggmCT87Yqq5iLaDlZQkii6EnYby1drETYgM33xeg_aem_Jv3QsJFIdeOw0K3uZ1Zrqw"
                        },
                        new
                        {
                            Id = 44,
                            Address = "Al Montazah Palace, 99999 Alexandria, Egypt",
                            Facebook = "https://www.facebook.com/share/15Q5PCjSzD/",
                            ImageUrl = "Hotels/Alexandria/44.jpg",
                            Location = "https://maps.app.goo.gl/r3mmpEBwRzA3vHqS8",
                            Name = "Helnan",
                            PhoneNumber = "01001710737",
                            PricePerHour = 4000.0,
                            WebSite = "https://www.helnan.com/en/Hotel/helnan-royal-alexandria/?hid=4e692ca5-519f-492f-9a2a-4079789b5877&id="
                        },
                        new
                        {
                            Id = 45,
                            Address = "LUSINDA HOTEL MANAGEMENT BY ZAD, Suez, Egypt",
                            Facebook = "https://www.facebook.com/lusinda.resort/",
                            ImageUrl = "Hotels/Suez/45.jpg",
                            Location = "https://maps.app.goo.gl/rDphdX2SYnJmAASt8",
                            Name = "LUSINDA",
                            PhoneNumber = "01201680000",
                            PricePerHour = 3700.0,
                            WebSite = "https://www.instagram.com/lusinda.resort/"
                        },
                        new
                        {
                            Id = 46,
                            Address = "25 KM After Ahmed Hamdy Tunnel, Ras Sedr, Egypt",
                            Facebook = "https://www.facebook.com/mousacoast.egy/",
                            ImageUrl = "Hotels/Suez/46.jpg",
                            Location = "https://maps.app.goo.gl/D8KEYAWegsJEaPT69",
                            Name = "Mousa Coast Hotel",
                            PhoneNumber = "+20226775732",
                            PricePerHour = 1800.0,
                            WebSite = "https://mousacoasthotel.com-egypt.com/"
                        },
                        new
                        {
                            Id = 47,
                            Address = "2 Sharie Bursaeid, Suez 43522 Egypt",
                            Facebook = "https://www.facebook.com/hotel.greenhouse/",
                            ImageUrl = "Hotels/Suez/47.jpg",
                            Location = "https://maps.app.goo.gl/xJXESEyc7p2Ri4kT6",
                            Name = "Green House",
                            PhoneNumber = "0623191554",
                            PricePerHour = 1000.0,
                            WebSite = "https://greenhouse.com-egypt.com/"
                        },
                        new
                        {
                            Id = 48,
                            Address = "Sharks Bay , 99999 Sharm El Sheikh, Egypt",
                            Facebook = "https://www.instagram.com/vhotelsharmelsheikh/",
                            ImageUrl = "Hotels/Sharm El Sheikh/48.jpg",
                            Location = "https://maps.app.goo.gl/exZMhMtQ9PP4R4XZA",
                            Name = "V Hotel",
                            PhoneNumber = "0693601091",
                            PricePerHour = 7300.0,
                            WebSite = "https://thevhotelsegypt.com/v-sharm-el-sheikh/"
                        },
                        new
                        {
                            Id = 49,
                            Address = "Naama Bay, Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/NovotelSharmElSheikh/,",
                            ImageUrl = "Hotels/Sharm El Sheikh/49.jpg",
                            Location = "https://maps.app.goo.gl/xpQ2k3nAcTmtpY9MA",
                            Name = "Novotel",
                            PhoneNumber = "0693600172",
                            PricePerHour = 4400.0,
                            WebSite = "https://all.accor.com/hotel/1715/index.en.shtml"
                        },
                        new
                        {
                            Id = 50,
                            Address = "Nabq bay, 11038 Sharm El Sheikh, Egyp",
                            Facebook = "https://www.facebook.com/albatroslagunavistaresort/",
                            ImageUrl = "Hotels/Sharm El Sheikh/50.jpg",
                            Location = "https://maps.app.goo.gl/3C7sKMpRxN4eDAoz5",
                            Name = "Pickalbatros Laguna Vista ",
                            PhoneNumber = "+20693710121",
                            PricePerHour = 8600.0,
                            WebSite = "https://www.pickalbatros.com/laguna-vista-hotel-sharm-el-sheikh"
                        },
                        new
                        {
                            Id = 51,
                            Address = "Om El Seid Cliff, Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/AmphorasHotels/",
                            ImageUrl = "Hotels/Sharm El Sheikh/51.jpg",
                            Location = "https://maps.app.goo.gl/iBdXX7891J7968796",
                            Name = "Amphoras",
                            PhoneNumber = "01223932782",
                            PricePerHour = 6400.0,
                            WebSite = "https://www.amphorashotels.com/amphoras?gad_source=1&gclid=Cj0KCQjwytS-BhCKARIsAMGJyzoXN18tpgCfWuylL776fMQhxIDgxj67v9CRnxk-ZhgA79I5d1RLOmcaAiZREALw_wcB"
                        },
                        new
                        {
                            Id = 52,
                            Address = "Naama Bay, 6019 Sharm El Sheikh, Egypt",
                            Facebook = "https://www.facebook.com/movenpicksharmelsheikh/",
                            ImageUrl = "Hotels/Sharm El Sheikh/52.jpg",
                            Location = "https://maps.app.goo.gl/gxrVZYu4byd2MWHZ7",
                            Name = "Movenpick",
                            PhoneNumber = "+20693600081",
                            PricePerHour = 5700.0,
                            WebSite = "https://movenpick.accor.com/en/africa/egypt/sharm-el-sheikh/resort-sharm-el-sheikh.html"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c8298a9-982f-4d9d-a632-55f7d148f735",
                            Email = "admin@egyptos.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            ImageUrl = "profiles/Default-Image.jpg",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NationalId = "12345678901234",
                            NormalizedEmail = "ADMIN@EGYPTOS.COM",
                            NormalizedUserName = "ADMIN@EGYPTOS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f3a18b3-c453-4a3a-b2e3-57f2e0429f50",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "admin@egyptos.com"
                        },
                        new
                        {
                            Id = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3c8f4ef-c9ab-49b5-9b16-06f17aa7668a",
                            Email = "Ahmed12@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmed",
                            ImageUrl = "profiles/df4fb389-64ed-486e-be7d-722771b6e3bc.jpeg",
                            LastName = "Hesham",
                            LockoutEnabled = false,
                            NationalId = "30305521354688",
                            NormalizedEmail = "AHMED12@GMAIL.COM",
                            NormalizedUserName = "AHMED12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01024866094",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46e17415-53e4-4e26-8ce4-3b9f91a4ebcd",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ahmed12@gmail.com"
                        },
                        new
                        {
                            Id = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e09e586-695e-44ad-86a9-f7b49ba3552b",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            ImageUrl = "profiles/Outdoor Portraits — San Francisco Bay Area's Premier Personal Brand and Headshot Photographer _ Alpa.jpeg",
                            LastName = "Salama",
                            LockoutEnabled = false,
                            NationalId = "30308795612367",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01134409876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "287317a5-2b4e-4193-ade4-9b03c843b021",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ali@gmail.com"
                        },
                        new
                        {
                            Id = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a61c81ae-cdb2-4c92-ae17-75247a4cb5cb",
                            Email = "Hassan44@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hassan",
                            ImageUrl = "profiles/Friendly Professional Business Headshot.jpeg",
                            LastName = "Alaa",
                            LockoutEnabled = false,
                            NationalId = "30306729061246",
                            NormalizedEmail = "HASSAN4412@GMAIL.COM",
                            NormalizedUserName = "HASSAN4412@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01079945073",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33fe0c4e-09d7-4b8b-a625-7cf0651fb90e",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Hassan44@gmail.com"
                        },
                        new
                        {
                            Id = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d973bd-092f-4869-ac70-0b1004519b48",
                            Email = "Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            ImageUrl = "profiles/82ebaf90-31fe-40ef-8358-99823ce3881d.jpeg",
                            LastName = "Mady",
                            LockoutEnabled = false,
                            NationalId = "30309871265308",
                            NormalizedEmail = "MOHAMED@GMAIL.COM",
                            NormalizedUserName = "MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01084670325",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a5413d0-0b02-48f8-a24f-16b929d0af74",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Mohamed@gmail.com"
                        },
                        new
                        {
                            Id = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a0bc059-4d5d-45dc-98dc-5e557d7aa1c1",
                            Email = "Maher@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maher",
                            ImageUrl = "profiles/Rajan Velu.jpeg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "30301937508274",
                            NormalizedEmail = "MAHER@GMAIL.COM",
                            NormalizedUserName = "MAHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01208173649",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04a9f78c-43b0-4a6f-bb40-c161adb30b23",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Maher@gmail.com"
                        },
                        new
                        {
                            Id = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d48db4f-16d7-418b-b97f-dbfe8616af56",
                            Email = "Nader@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nader",
                            ImageUrl = "profiles/Mari Juliano.jpeg",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NationalId = "303020837616543",
                            NormalizedEmail = "NADER@GMAIL.COM",
                            NormalizedUserName = "NADER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01147893547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e68c1657-3cb1-4097-a45f-27c1a655c81f",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Nader@gmail.com"
                        },
                        new
                        {
                            Id = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7ed49bc-72fb-42be-afc5-fbd0351bd759",
                            Email = "Khaled@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Khaled",
                            ImageUrl = "profiles/MEN - Location - Headshot Photography by Brandon Tabiolo.jpeg",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NationalId = "30301920482846",
                            NormalizedEmail = "KHALED@GMAIL.COM",
                            NormalizedUserName = "KHALED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01293749183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f85433e6-bf5b-4ffc-9d02-3a7cc9938547",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Khaled@gmail.com"
                        },
                        new
                        {
                            Id = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9773109-8364-4c61-a5d4-9fe85a58c0f4",
                            Email = "Kareem@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kareem",
                            ImageUrl = "profiles/Why I Mainly Photograph in Portrait Orientation for Actors' Headshots.jpeg",
                            LastName = "Maged",
                            LockoutEnabled = false,
                            NationalId = "303092689146845",
                            NormalizedEmail = "KAREEM@GMAIL.COM",
                            NormalizedUserName = "KAREEM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01024860821",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aed0822d-8180-49b3-85cc-a4f5a33a3b56",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Kareem@gmail.com"
                        },
                        new
                        {
                            Id = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43d7bf34-bc3a-4d7f-841e-f1dfd028303d",
                            Email = "Halem@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Halem",
                            ImageUrl = "profiles/Gorgeous smile of Alexis Petit.jpeg",
                            LastName = "Ebrahim",
                            LockoutEnabled = false,
                            NationalId = "30308391092836",
                            NormalizedEmail = "HALEM@GMAIL.COM",
                            NormalizedUserName = "HALEM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01049182640",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "999faa1d-9041-4c56-888c-42b8286d68b7",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Halem@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c76ae4f3-37a2-4707-b71b-f5d99f6f50da",
                            Email = "Salma@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Salma",
                            ImageUrl = "profiles/Women in Business.jpeg",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NationalId = "30302901738376",
                            NormalizedEmail = "SALMA@GMAIL.COM",
                            NormalizedUserName = "SALMA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01029836539",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2121aa48-49d8-4b1e-841e-48a7e61b0863",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Salma@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f58fbbd5-a0d4-460c-bc0d-5afb9a0adb63",
                            Email = "Jesseyd@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jessy",
                            ImageUrl = "profiles/9151a7a4-4fc2-4bb0-a427-f97f4127e661.jpeg",
                            LastName = "Danial",
                            LockoutEnabled = false,
                            NationalId = "40415678901625",
                            NormalizedEmail = "JESSEYD@GMAIL.COM",
                            NormalizedUserName = "JESSEYD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "07022670816",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4dd9dcd-8ef8-40fa-b1ac-6a6caa133079",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Jesseyd@gmail.com"
                        },
                        new
                        {
                            Id = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edb44c87-00c3-488a-9b74-2fc632b48bfc",
                            Email = "Marry@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            ImageUrl = "profiles/468f9794-778b-429f-bea8-b7440810819d.jpeg",
                            LastName = "John",
                            LockoutEnabled = false,
                            NationalId = "40423109753269",
                            NormalizedEmail = "MARRY@GMAIL.COM",
                            NormalizedUserName = "MARRY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "02029837399",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e27dc6f7-4bf0-44a1-a3fb-8b3e5239e87f",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Marry@gmail.com"
                        },
                        new
                        {
                            Id = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c615d822-a4fc-4a3a-8b23-b4b6c155b96a",
                            Email = "Mark@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            ImageUrl = "profiles/44050f40-662d-408b-9dda-9e3271d7c36e.jpeg",
                            LastName = "ALbrto",
                            LockoutEnabled = false,
                            NationalId = "4042098715635491",
                            NormalizedEmail = "MARK@GMAIL.COM",
                            NormalizedUserName = "MARK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "070901468297",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6909260d-6430-4133-868e-9091e01fe56f",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Mark@gmail.com"
                        },
                        new
                        {
                            Id = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f58fbbd5-a0d4-460c-bc0d-5afb9a0adb63",
                            Email = "Jessey@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jessy",
                            ImageUrl = "profiles/9151a7a4-4fc2-4bb0-a427-f97f4127e661.jpeg",
                            LastName = "MArk",
                            LockoutEnabled = false,
                            NationalId = "40415678901625",
                            NormalizedEmail = "JESSEY@GMAIL.COM",
                            NormalizedUserName = "JESSEY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "07022670816",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4dd9dcd-8ef8-40fa-b1ac-6a6caa133079",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Jessey@gmail.com"
                        },
                        new
                        {
                            Id = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4986d9a-0ff6-4ecb-9f51-b8bb5dc826e4",
                            Email = "Rana@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rana",
                            ImageUrl = "profiles/2edc3141-b4cd-411d-9136-33440bbb1c03.jpeg",
                            LastName = "Osama",
                            LockoutEnabled = false,
                            NationalId = "30304597102873",
                            NormalizedEmail = "RANA@GMAIL.COM",
                            NormalizedUserName = "RANA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01028649032",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5e74c9d-fe75-442e-a90e-6400f6a2f0c7",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Rana@gmail.com"
                        },
                        new
                        {
                            Id = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ca42846-c687-48a2-9eb4-77fc5f21ae44",
                            Email = "Ramy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ramy",
                            ImageUrl = "profiles/16 Black Chefs Changing Food in America (Published 2019).jpeg",
                            LastName = "Aziz",
                            LockoutEnabled = false,
                            NationalId = "30303409168364",
                            NormalizedEmail = "RAMY@GMAIL.COM",
                            NormalizedUserName = "RAMY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "011298640281",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f439954d-63d4-4e36-8a5f-827f533cc6a1",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Ramy@gmail.com"
                        },
                        new
                        {
                            Id = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d607b523-2920-4ea8-83c4-2103dbb45b0a",
                            Email = "Rola@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rola",
                            ImageUrl = "profiles/Before and After_ Transforming Your LinkedIn Profile with AI Headshots.jpeg",
                            LastName = "Samy",
                            LockoutEnabled = false,
                            NationalId = "30306183028747",
                            NormalizedEmail = "ROLA@GMAIL.COM",
                            NormalizedUserName = "ROLA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "012938475601",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eac93f1e-749b-4c66-9783-c46c16b4ffbf",
                            Sex = "Female",
                            TwoFactorEnabled = false,
                            UserName = "Rola@gmail.com"
                        },
                        new
                        {
                            Id = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a46ec364-f74a-455e-93f2-471913135d05",
                            Email = "Malek@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Malek",
                            ImageUrl = "profiles/9c12d50d-5cbe-4c75-8bca-cbc57d504a7b.jpeg",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NationalId = "30308103829384",
                            NormalizedEmail = "MALEK@GMAIL.COM",
                            NormalizedUserName = "MALEK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01283604718",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16dd3214-5abc-48b6-83cd-df00d21f16dc",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Malek@gmail.com"
                        },
                        new
                        {
                            Id = "52511e3a-0690-45b0-9e52-02667a473b18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e184b3aa-6771-4830-83f9-b1a59c9676c4",
                            Email = "Magdy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Magdy",
                            ImageUrl = "profiles/Dallas Headshots Photographer - Willie & Kim Photography.jpeg",
                            LastName = "Abdallah",
                            LockoutEnabled = false,
                            NationalId = "30301789256730",
                            NormalizedEmail = "MAGDY@GMAIL.COM",
                            NormalizedUserName = "MAGDY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6vZ01506YX1ctq2EthavTlwjZTRO5AjuoQ5LDjMQ+cpfTdIRy0cPAFQfqq4zbWYA==",
                            PhoneNumber = "01183670178",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda38b97-da47-40ba-bbe3-702a78f4e009",
                            Sex = "Male",
                            TwoFactorEnabled = false,
                            UserName = "Magdy@gmail.com"
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("PrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PublicTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("PublicTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("SalaryPerHour")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A passionate tour guide with in-depth knowledge of historical landmarks and cultural heritage, dedicated to providing engaging and educational experiences.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Experienced tour guide specializing in archaeological sites, offering insightful narratives that bring history to life.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Friendly and knowledgeable guide, ensuring every visitor enjoys a personalized and immersive travel experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Expert in local history and traditions, delivering memorable tours that blend education and entertainment.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "A dynamic storyteller who transforms every tour into a fascinating journey through time and culture.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 150.0,
                            UserId = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            YearsOfExperience = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fluent in multiple languages, offering exceptional guided experiences for travelers from around the world.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Skilled in adventure tourism, leading exciting and informative tours through natural wonders and historical landmarks.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Passionate about sharing hidden gems and off-the-beaten-path locations with travelers seeking authentic experiences.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "A certified tour guide with years of experience, ensuring visitors gain deep insights into historical and modern attractions.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Dedicated to providing an unforgettable journey through historical sites, blending education with entertainment.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 300.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = 11,
                            Description = "An enthusiastic guide who loves connecting people with the rich history and traditions of the region.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "Expert in eco-tourism, offering sustainable and immersive travel experiences for nature lovers.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 13,
                            Description = "Combining storytelling with historical facts to create engaging and interactive guided tours.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 14,
                            Description = "A charismatic and knowledgeable guide, ensuring tourists leave with a deeper appreciation for the destination.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 15,
                            Description = "Certified heritage interpreter, offering in-depth explorations of ancient and modern cultural landmarks.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 500.0,
                            UserId = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            Id = 16,
                            Description = "Well-versed in local customs, history, and cuisine, providing a holistic travel experience for every visitor.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 4000.0,
                            UserId = "52511e3a-0690-45b0-9e52-02667a473b18",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = 17,
                            Description = "Professional and friendly guide who creates customized tours to meet the interests of each group.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 750.0,
                            UserId = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            Id = 18,
                            Description = "A history enthusiast dedicated to making every tour an unforgettable and enriching experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 700.0,
                            UserId = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = 19,
                            Description = "Providing top-tier guided tours that blend adventure, history, and culture for an unforgettable experience.",
                            IsActive = true,
                            IsAvailable = true,
                            Rate = 3.0,
                            SalaryPerHour = 750.0,
                            UserId = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            YearsOfExperience = 5
                        });
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "TourGuideId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("BackTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublicTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PublicTransportId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Workings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bded8535075",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be08dd83078",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ce2fd704-7a3c-4a03-846e-c5479a8b921d",
                            ConcurrencyStamp = "aacecacd-28e1-43cc-92da-decb1f9b32c4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3",
                            ConcurrencyStamp = "B1F115C4-D298-4C6D-AA7B-6C7DC785A1C5",
                            Name = "TourGuide",
                            NormalizedName = "TOURGUIDE"
                        },
                        new
                        {
                            Id = "0191d311-2918-7f76-bd8a-0bdf740adff8",
                            ConcurrencyStamp = "0191d311-2918-7f76-bd8a-0be100f11384",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4b2f91d-9e12-4f4a-b3db-1b58fca15e66",
                            RoleId = "0191d311-2918-7f76-bd8a-0bded8535075"
                        },
                        new
                        {
                            UserId = "683211b1-1125-42a1-b148-a606a4ca4df3",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "df2ea217-2e82-48b9-9442-47556c1a9403",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "6b9b3e85-ce32-4944-9a46-601bb2b40000",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "fc4df06f-05c2-4751-96c1-8040f2761b7f",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "7c30ae16-67eb-4ff2-858f-70aa79aaa3c4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "ce47a5ab-df14-416a-b500-9b544fa666a4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "249aa6c5-d578-4517-8a42-48f24a7d959e",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "49a438ba-672d-41d5-97ba-5536ffbec2a6",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "bf2ee728-59af-45ec-9b70-e5f5e27eef8e",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df2",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df3",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "5d577849-97d1-4984-bf96-6fee7d08c8be",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "f89bca4a-8fc9-4259-a46d-22562907c27f",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "cb3cb7ca-1921-49fd-a11e-600b351b3df4",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "8766c317-1eaa-468a-b34d-59790c8eb915",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "52511e3a-0690-45b0-9e52-02667a473b18",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "a0e2f1e7-53e5-416f-b0b0-ca4668563233",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "357c8ce0-ed6e-4979-b1f9-5e0f6e90c9a1",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        },
                        new
                        {
                            UserId = "10eb7637-95f4-45d2-b200-84dbb188ec41",
                            RoleId = "6CCF2454-C7FE-4F58-89FB-F565AE5643E3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.AreaType", "AreaType")
                        .WithMany("Areas")
                        .HasForeignKey("AreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaImages")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaWorking", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Working", "Working")
                        .WithMany("AreaWorkings")
                        .HasForeignKey("WorkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Working");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingEventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "EventDate")
                        .WithMany()
                        .HasForeignKey("EventDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingEventDates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingHotel", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Hotel", "Hotel")
                        .WithMany("BookingHotels")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingHotels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingPrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.PrivateTransport", "PrivateTransport")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("PrivateTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingPrivateTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateTransport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("BookingTourGuides")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingTourGuides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.BookingTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("BookingTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("BookingTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Event", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.EventDate", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.HistoricalImage", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Historical", "Historical")
                        .WithMany("HistoricalImages")
                        .HasForeignKey("HistoricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historical");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Item", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", null)
                        .WithMany("Items")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TransportType", "TransportType")
                        .WithMany("PrivateTransports")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Report", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuideTrip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Trip", "Trip")
                        .WithMany("TourGuideTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Area", "Area")
                        .WithMany("Trips")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.PublicTransport", "PublicTransport")
                        .WithMany()
                        .HasForeignKey("PublicTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("PublicTransport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egyptos.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaImages");

                    b.Navigation("AreaWorkings");

                    b.Navigation("Items");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.AreaType", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventDates");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventDate", b =>
                {
                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Historical", b =>
                {
                    b.Navigation("HistoricalImages");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("BookingHotels");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("BookingEventDates");

                    b.Navigation("BookingHotels");

                    b.Navigation("BookingPrivateTransports");

                    b.Navigation("BookingTourGuides");

                    b.Navigation("BookingTrips");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.PrivateTransport", b =>
                {
                    b.Navigation("BookingPrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TourGuide", b =>
                {
                    b.Navigation("BookingTourGuides");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.TransportType", b =>
                {
                    b.Navigation("PrivateTransports");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Trip", b =>
                {
                    b.Navigation("BookingTrips");

                    b.Navigation("TourGuideTrips");
                });

            modelBuilder.Entity("Egyptos.Domain.Entities.Working", b =>
                {
                    b.Navigation("AreaWorkings");
                });
#pragma warning restore 612, 618
        }
    }
}
